using OpenDentBusiness.WebTypes.AutoComm;
using System;

namespace OpenDentBusiness
{
    ///<summary>When a reminder is sent for an appointment a record of that send is stored here. This is used to prevent re-sends of the same 
    ///Thank You.</summary>
    [Serializable, CrudTable(HasBatchWriteMethods = true)]
    public class ApptThankYouSent : AutoCommApptGuid
    {
        ///<summary>Primary key.</summary>
        [CrudColumn(IsPriKey = true)]
        public long ApptThankYouSentNum;
        ///<summary>The Date and time of the original appointment. We need this in case the appointment was moved and needs another reminder sent out.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.DateT)]
        public DateTime ApptSecDateTEntry;
        ///<summary>Generated by OD. Timestamp when EConnector sent this ApptThankYouSent to HQ. Stored in local customer timezone.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.DateT)]
        public DateTime DateTimeThankYouTransmit;
        ///<summary>Indicates that the ApptThankYouSent should not be resent if changes were made.</summary>
        public bool DoNotResend;
        #region Obsolete
        //Every field in this region should no longer be used.  They have been removed from the database, but must exist in the class for backward compatibility,
        //based on the fact that this class is serialized and sent to HQ in older versions.

        ///<summary>Deprecated.Generated by HQ. Identifies this ApptThankYouSent in future transactions between HQ and OD. Will be used for email thankyous only.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string ShortGuidEmail;
        ///<summary>Deprecated.Enum:AutoCommStatus Generated by HQ. Indicates whether or not we were able to send the text message.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public AutoCommStatus SmsSentStatus;
        ///<summary>Deprecated.Enum:AutoCommStatus Generated by HQ. Indicates whether or not we were able to send the e-mail.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public AutoCommStatus EmailSentStatus;
        ///<summary>Deprecated.Generated by OD. If true then generate and send sms.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public bool IsForSms;
        /////<summary>Deprecated.Generated by OD. If true then generate and send email.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public bool IsForEmail;
        ///<summary>Deprecated.Generated by OD.  Wireless phone number of the corresponding patient.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string PhonePat;
        ///<summary>Deprecated.Generated by OD. OD proper can construct this to be any length. Will be converted to final MsgText and sent to patient once tags are 
        ///replaced with real values.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string MsgTextToMobileTemplate;
        ///<summary>Deprecated.Generated by HQ. Applied real text to tags from MsgTextTemplate.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string MsgTextToMobile;
        ///<summary>Deprecated.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string EmailSubjTemplate;
        ///<summary>Deprecated.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string EmailSubj;
        ///<summary>Deprecated.Generated by OD. Includes [ConfirmCode] replacement tag and (optionally) [URL] replacement tag. OD proper can construct this to be any length.
        ///Will be converted to final EmailText and emailed to patient once tags are replaced with real values.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string EmailTextTemplate;
        ///<summary>Deprecated.Generated by HQ. Applied real text to tags from EmailTextTemplate.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string EmailText;
        #endregion

        public bool IsValidDuration
        {
            get
            {
                return TSPrior.TotalDays > 0;
            }
        }
        public bool IsSameDay
        {
            get
            {
                return IsValidDuration && TSPrior.TotalDays < 1;
            }
        }

        public bool IsFutureDay
        {
            get
            {
                return IsValidDuration && TSPrior.TotalDays >= 1;
            }
        }

        public int DaysInFuture
        {
            get
            {
                if (!IsFutureDay)
                {
                    return 0;
                }
                //Rounds 1.1 to 2. So anything greater than exactly n days will be n+1 days.
                return (int)Math.Ceiling(TSPrior.TotalDays);
            }
        }

        public int NumMinutesPrior
        {
            get
            {
                if (!IsSameDay)
                {
                    return 0;
                }
                return (int)TSPrior.TotalMinutes;
            }
        }
    }
}
