using System;
using System.Xml.Serialization;

namespace OpenDentBusiness
{
    ///<summary>Received as XML output from XWeb gateway. Not all fields are available for all method calls. This is a combination of all possible output fields. 
    ///The fields that are available are dependent on which method was called and the given result.
    ///HPF (XWeb Hosted Payment Form) Payments and HPF CC Alias creations will each enter a row in this table. That row will be monitored by the eConnector and updated when the XWebResponseCode changes from Pending.
    /// -- 1) Create the row and indicate the HPF/OTK.
    /// -- 2) Poll the OTK (one-time key) until an XWebResponseCode is available. Update the row with information about the transaction.
    ///DTG (XWeb Direct To Gateway) Will enter 1 row in this table. 
    /// -- 1) Make the DTG payment using a pre-authorized CC alias. Create row with information about the transaction.
    ///Any fields prefixed with 'Gateaway output' come directly as XML output from the XWeb Gateway. All other fields are derived by OD.
    ///The class instance will created by eConnector by deserializing an XML string as received from XWeb Gateway. 
    ///The fields names MUST NOT CHANGE for this reason. XML will not deserialize if the names do not match EXACTLY.</summary>
    [Serializable()]
    public class XWebResponse : TableBase
    {
        ///<summary>Primary key.</summary>
        [CrudColumn(IsPriKey = true)]
        public long XWebResponseNum;
        ///<summary>FK to patient.PatNum.</summary>
        public long PatNum;
        ///<summary>FK to provider.ProvNum.</summary>
        public long ProvNum;
        ///<summary>FK to clinic.ClinicNum.</summary>
        public long ClinicNum;
        ///<summary>FK to payment.PayNum.</summary>
        public long PaymentNum;
        ///<summary>Timestamp at which this row was created. Auto generated on insert.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.DateTEntry)]
        public DateTime DateTEntry;
        ///<summary>Timestamp at which this row was last updated. Will be updated each time the OTK status is polled and one final time when XWebResponseCode changes from Pending.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.DateT)]
        public DateTime DateTUpdate;
        ///<summary>Inidicates which phase of the XWeb process this transaction is in. See class summary for details.</summary>
        public XWebTransactionStatus TransactionStatus;
        ///<summary>Gateaway output. Pre-defined responses generated by XWeb. Will be converted to strongly typed enum XWebResponseCode.</summary>
        public int ResponseCode;
        ///<summary>Enum:XWebResponseCodes Strongly typed representation of ResponseCode. Initialized by XWebInputAbs.CreateGatewayResponse().</summary>	
        [CrudColumn(SpecialType = CrudSpecialColType.EnumAsString)]
        public XWebResponseCodes XWebResponseCode;
        ///<summary>Gateaway output. Gives a more detailed description on the ResponseCode.</summary>
        public string ResponseDescription;
        ///<summary>Gateaway output. This is the One Time Key that is used to launch the Hosted Payment Form. 
        ///The status of the OTK can be polled to determine if the end user has completed the HPF or if it has expired.</summary>
        public string OTK;
        ///<summary>This URL will be generated as a result of the OTK. The URL can be browsed in an IFRAME to create a secure portal between a browser 
        ///and the XWeb server. It is used with EdgeExpress now that HPF is deprecated.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.IsText)]
        public string HpfUrl;
        ///<summary>Timestamp at which this HPF will expire. The end user will only be able to access the HPF before it has expired. This expiration is set explicitly when creating the HPF.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.DateT)]
        public DateTime HpfExpiration;
        ///<summary>Gateaway output. Each transaction is given a reference for future use. This can be used to void the transaction.</summary>
        public string TransactionID;
        ///<summary>Gateaway output. The type of transaction that was processed. Must be a string data type because it comes from the Gateway as a string.</summary>
        public string TransactionType;
        ///<summary>Gateaway output. A credit transaction will return an alias which is now linked to the credit card which was used. 
        ///This alias can be used in the future to make DTG payments and circumvent the need for the secure HPF. Only applies when Credit (not Debit) data is submitted on the HPF.
        ///CreditCard.XChargeToken is often set to this value.</summary>
        public string Alias;
        ///<summary>Gateaway output. The card type used for this transaction. 
        ///"Credit" - for cards that support signature only.
        ///"Debit/Credit" - for cards that support either PIN-entry or signature.
        ///"Debit/ATM" - for cards that support PIN-entry only.
        ///"FSA" - for Flexible Spending Accounts</summary>
        public string CardType;
        ///<summary>Gateaway output. The card brand used for this transaction. Possible values include "Visa", "MasterCard", "Discover", "American Express", "Diners Club", "JCB", "PayPal".</summary>
        public string CardBrand;
        ///<summary>Gateaway output. The industry standard abbreviation of the card brand. 
        ///Possible values include "VS", "MC", "DS", "AX", "DCIDISC", "JCB-DISC", "PP" (order respective to CardBrand above).</summary>
        public string CardBrandShort;
        ///<summary>Gateaway output. Provides a masked format of the account number. The format will show the last 4 digits, the remainder will masked out with an asterisk character.
        ///End user will be presented with a list of previously generated MaskedAcctNum(s) when making a payment. These are linked to an alias which can be used to make a DTG payment.
        ///This ciccumvents the need to use the HPF.</summary>
        public string MaskedAcctNum;
        ///<summary>Gateaway output. Amount of credit card and check transactions.</summary>
        public double Amount;
        ///<summary>Gateaway output. A 6 digit authorization approval code.</summary>
        public string ApprovalCode;
        ///<summary>Gateaway output. Response from the Card Security Code lookup. Only applies when Credit(not Debit) data is submitted on the HPF.</summary>
        public string CardCodeResponse;
        ///<summary>Gateaway output. An identification number assigned by the OpenEdge Gateway to the receipt.</summary>
        public int ReceiptID;
        ///<summary>Gateaway output. Provides the Expiration Date of the account being accessed. Format is yyMM from XWeb gateway. Will be converted to ExpirationDate.</summary>
        public string ExpDate;
        ///<summary>Gateaway output. Indicates how the account number was entered by the end user. Always 'KEYED' in our case.</summary>
        public string EntryMethod;
        ///<summary>Gateaway output. The response from the processor. It is only returned on transactions that are processed by the processor (Auth, Sales and Settlements).</summary>
        public string ProcessorResponse;
        ///<summary>Gateaway output. This indicates the current open batch number.</summary>
        public int BatchNum;
        ///<summary>Gateaway output. Net amount of Credit and Debit Card transactions in batch.</summary>
        public double BatchAmount;
        ///<summary>The expiration date of the credit card that was referenced in this transaction. DateTime representation of ExpDate. Initialized by XWebInputAbs.CreateGatewayResponse().</summary>
        public DateTime AccountExpirationDate;
        ///<summary>Debug information regarding this response. Can only be set by XWebResponses.ProcessOutstandingTransactions().</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.IsText)]
        public string DebugError;
        ///<summary>Will be entered as Payment.PayNote once payment transaction has completed.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.IsText)]
        public string PayNote;
        ///<summary>Enum:CreditCardSource The source of where this transaction originated from.</summary>
        public CreditCardSource CCSource = CreditCardSource.XWeb;
        ///<summary>Generated by us but necessary for Card Not Present API calls. Used to link transactions together (e.g. for returns).</summary>
        public string OrderId;
        ///<summary>Email address used for a requested receipt provided by the user when making a payment via the patient portal.</summary>
        public string EmailResponse;
        ///<summary>The GUID used in EserviceLogs related to this response. May be blank.</summary>
        public string LogGuid;

        [XmlIgnore]
        public XWebTransactionType XTransactionType
        {
            get
            {
                XWebTransactionType xWebTransactionType;
                if (!Enum.TryParse<XWebTransactionType>(this.TransactionType, out xWebTransactionType))
                {
                    return XWebTransactionType.Undefined;
                }
                return xWebTransactionType;
            }
        }

        ///<summary>Returned from XWeb Gateway as an int. Helper method to convert to enum.</summary>
        public static XWebResponseCodes ConvertResponseCode(int responseCode)
        {
            if (Enum.IsDefined(typeof(XWebResponseCodes), responseCode))
            {
                return (XWebResponseCodes)responseCode;
            }
            return XWebResponseCodes.Undefined;
        }

        ///<summary>Returned from XWeb Gateway as a string. Helper method to convert to DateTime. Format is yyMM from XWeb gateway</summary>
        public static DateTime ConvertExpDate(string expDate)
        {
            try
            {
                //Add 2000 to the year and expire on first of month.				
                return new DateTime(2000 + int.Parse(expDate.Substring(2, 2)), int.Parse(expDate.Substring(0, 2)), 1);
            }
            catch
            {
                return new DateTime(1880, 1, 1);
            }
        }

        ///<summary>These fields should persist from instance to instance for the same OTK.</summary>
        public void SetPersistentFields(long xWebResponseNum, string transactionType, long patNum, long provNum, long clinicNum, double amount, string otk,
            string hpfUrl, DateTime hpfExpiration, string debugError, string payNote, CreditCardSource ccSource, string email = "")
        {
            XWebResponseNum = xWebResponseNum;
            TransactionType = transactionType;
            PatNum = patNum;
            ProvNum = provNum;
            ClinicNum = clinicNum;
            Amount = amount;
            OTK = otk;
            HpfUrl = hpfUrl;
            HpfExpiration = hpfExpiration;
            DebugError = debugError;
            PayNote = payNote;
            EmailResponse = email;
            CCSource = ccSource;
        }

        ///<summary>Formats a note that can be used as a PayNote on a payment. If the XWebResponse is a return or a void of a positive payment, pass in
        ///false for keepAmountPositive.</summary>
        public string GetFormattedNote(bool keepAmountPositive, bool doIncludeNote = true, bool isErrorMessage = false)
        {
            DateTime dateTimeProcessed;
            if (DateTEntry.Year > 1880 || DateTUpdate.Year > 1880)
            {
                dateTimeProcessed = (DateTEntry > DateTUpdate ? DateTEntry : DateTUpdate);//The greater of the two dates
            }
            else
            {
                dateTimeProcessed = DateTime.Now;
            }
            string retVal = "";
            if (!isErrorMessage)
            {
                retVal = Lans.g(this, "Amount:") + " " + (keepAmountPositive ? Amount : -Amount).ToString("f") + "\r\n"
                + Lans.g(this, "Card Number:") + " " + MaskedAcctNum + "\r\n"
                + Lans.g(this, "Transaction ID:") + " " + TransactionID + "\r\n";
            }
            retVal += Lans.g(this, "Response:") + " " + ResponseDescription + "\r\n"
            + Lans.g(this, "Processed:") + " " + dateTimeProcessed.ToShortDateString() + " " + dateTimeProcessed.ToShortTimeString() + "\r\n"
            + (doIncludeNote ? Lans.g(this, "Note:") + " " + PayNote : "");
            return retVal;
        }
    }

    ///<summary>Various statuses from XWeb. These states are returned directly from the XWeb gateway. A more complete list can be found at \\opendental.od\serverfiles\Storage\OPEN DENTAL\Programmers Documents\Bridge Info\X-Charge\EdgeExpress\EdgeExpress Card Not Present API 1.0.0.pdf.</summary>
    public enum XWebResponseCodes
    {
        ///<summary>1000</summary>
        Undefined = 1000,
        ///<summary>100</summary>
        OtkSuccess = 100,
        ///<summary>000</summary>
        Approval = 000,
        ///<summary>001</summary>
        Declined = 001,
        ///<summary>005</summary>
        AliasSuccess = 005,
        ///<summary>007</summary>
        PartialApproval = 007,
        ///<summary>009</summary>
        AutoDecline = 009,
        ///<summary>010</summary>
        InvalidExpirationDate = 010,
        ///<summary>032 - Used when creating a card alias.</summary>
        ZeroDollarAuthApproval = 032,
        ///<summary>101 - Expired Without Approval.  Hosted Form timed out without Approval, OTK was never launched, or Invalid OTK</summary>
        ExpiredWithoutApproval = 101,
        ///<summary>102 - Pending (neither of the above events has occurred yet)</summary>
        Pending = 102,
        ///<summary>800 Parsing Error Unable to parse the XML request sent.</summary>
        ParsingError = 800,
        ///<summary>801 Maximum Request Data Exceeded Error - The XML request exceeds the 2048-byte maximum size.</summary>
        MaxRequestDataExceededError = 801,
        ///<summary>802 Duplicate Field Error - The XML request had more than one copy of a particular field. The field causing the error may be specified.</summary>
        DuplicateFieldError = 802,
        ///<summary>803 Improper DLL Error - Unrecognized DLL name. This can be caused by a wrong URL entered into the "Server Location" setting under XCharge Server Setup, Credit Cards, Connection.</summary>
        ImproperDLLError = 803,
        ///<summary>804 Specification Version Error - XML error, the Specification Version field is set incorrectly.</summary>
        SpecificationVersionError = 804,
        ///<summary>805 Authentication Error -  The XWeb ID, Auth Key or Terminal ID fields are incorrect (check for leading and trailing spaces if they appear to match those on file). The field causing the error may be specified.</summary>
        AuthenticationError = 805,
        ///<summary>806 Production Merchant Set Up Error - The Mode was incorrectly sent. This can happen when trying to process on theProduction server with a Development or Test Mode Processing Account.</summary>
        ProductionMerchantSetUpError = 806,
        ///<summary>807 Test Merchant Set Up Error - The Mode was incorrectly sent. This can happen when trying to process on the Testserver with a Development or Production Mode Processing Account.</summary>
        TestMerchantSetUpError = 807,
        ///<summary>808 Development Merchant Set Up Error - The Mode was incorrectly sent. This can happen when trying to process on theDevelopment server with a Production or Test Mode Processing Account.</summary>
        DevelopmentMerchantSetUpError = 808,
        ///<summary>809 Required Field Not Sent Error - A field that is required for this transaction type was not sent. The field causing theerror may be specified.</summary>
        RequiredFieldNotSentError = 809,
        ///<summary>810 Inconsistent Conditional Field Error - A field that does not have to be sent was sent in the wrong context. The field causing the error may be specified.</summary>
        InconsistentConditionalFieldError = 810,
        ///<summary>811 Improper Field Data Error - A field sent to the EdgeExpress Gateway was not formatted correctly. This could pertain to Processing Account Information configured in XCharge or BMS, or card information. The field causing the error may be specified.</summary>
        ImproperFieldDataError = 811,
        ///<summary>812 Unrecognized Name / Tag Error - The XML tag sent is not in the API</summary>
        UnrecognizedNameTagError = 812,
        ///<summary>813 Duplicate Transaction Error - A transaction was run for the same amount on the same card within a certain time limit. The duplicate checking time is set on the EdgeExpress Gateway, usuallybetween 1 and 60 minutes.</summary>
        DuplicateTransactionError = 813,
        ///<summary>814 Invalid Reference Error - The Transaction ID used for a Void, Return, etc. is invalid. </summary>
        InvalidReferenceError = 814,
        ///<summary>815 Transaction Already Voided - The Transaction ID used for a Void was already voided.</summary>
        TransactionAlreadyVoided = 815,
        ///<summary>816 Transaction Already Captured - The Transaction ID used for a Capture of an Authorized charge was already used and the transaction has been Captured.</summary>
        TransactionAlreadyCaptured = 816,
        ///<summary>817 Empty Batch - The batch is empty and cannot settle. You cannot settle an empty batch.</summary>
        EmptyBatch = 817,
        ///<summary>818 Merchant Locked For Settlement - The Processing Account is in the process of being settled/batched. Wait a moment and try again.</summary>
        MerchantLockedForSettlement = 818,
        ///<summary>819 Merchant Locked for Maintenance - The Processing Account is locked for database or server maintenance. Wait amoment and try again.</summary>
        MerchantLockedForMaintenance = 819,
        ///<summary>820 Temporary Service Outage - Retry Transaction - The EdgeExpress Gateway itself may be down. Wait a moment and try again.</summary>
        TemporaryServiceOutage = 820,
        ///<summary>821 Processing Host Unavailable - Certain back end account parameters may not be set correctly. Have the account settings checked. Specifically, check the TSYS Vital Hierarchy Values. </summary>
        ProcessingHostUnavailable = 821,
        ///<summary>823 Invalid Account Data - A field sent to the EdgeExpress Gateway appears invalid (correctly formatted but not on file). This could pertain to Processing Account Information configured in XCharge or BMS, or card information. The field causing the response may be specified.</summary>
        InvalidAccountData = 823,
        ///<summary>824 Industry Mismatch Error - The Processing Account is configured with the incorrect Market Type. This can occur if XCharge or BMS is not configured with the same Market Type as the EdgeExpress Gateway.</summary>
        IndustryMismatchError = 824,
        ///<summary>825 Rejected Internal support only -  Reserved for Fraud, Not currently implemented. </summary>
        RejectedInternalSupportOnly = 825,
        ///<summary>827 Invalid Card Type -  The account number entered is not valid for the card type entered. If Card Type is Visa, then the account number must be for a Visa account. </summary>
        InvalidCardType = 827,
        ///<summary>828 Card Type Not Supported - The card type (Visa, Mastercard, American Express, etc.) for the attempted transaction is not enabled at the EdgeExpress Gateway.</summary>
        CardTypeNotSupported = 828,
        ///<summary>829 Card Code Required - The Card Security Code (CSC, also known as the CVV, CVC or CID) is set to "required" for keyed transactions at the EdgeExpress Gateway, but was not sent.</summary>
        CardCodeRequired = 829,
        ///<summary>830 Address Required - The address (house number, part of the Address Verification System) is set to "required" for keyed transactions at the EdgeExpress Gateway, but was not sent.</summary>
        AddressRequired = 830,
        ///<summary>831 ZIP Code Required - The ZIP code (part of the Address Verification System) is set to "required" for keyed transactions at the EdgeExpress Gateway, but was not sent.</summary>
        ZipCodeRequired = 831,
        ///<summary>832 Encoded Data Format Error - Encoded format of check image file could not be read or was not submitted when expected.</summary>
        EncodedDataFormatError = 832,
        ///<summary>833 Check Services Image Error - MICR and Amount cannot be read The attempted paper check scan failed. When this occurs you should have the option to manually enter the check information or rescan the check.</summary>
        CheckServicesImageErrorMICRAndAmout = 833,
        ///<summary>834 Check Services Image Error - MICR cannot be read The attempted paper check scan failed. When this occurs you should have the option to manually enter the check information or rescan the check.</summary>
        CheckServicesImageErrorMICROnly = 834,
        ///<summary>835 Check Services Image Error - Amount cannot be read The attempted paper check scan failed. When this occurs you should have the option to manually enter the check information or rescan the check.</summary>
        CheckServicesImageErrorAmountOnly = 835,
        ///<summary>838 Email Service Error - The EdgeExpress Gateway attempted to send an email, possibly for a password reset request, but the attempt failed.</summary>
        EmailServiceError = 838,
        ///<summary>842 Invalid Reference Error - Response code returned when the referenced transaction type does not match.</summary>
        InvalidReferenceErrorResponseCodeMisMatch = 842,
        ///<summary>900 TSYS Error - Error thrown by Processor TSYS: the EdgeExpress Gateway is setup correctly, but the card or other value submitted is incorrect. SERV NOT ALLOWED usually indicates a Decline, Failure CV indicates the Card Type is not supported (e.g. AMEX needs to be enabled), and Failure HV indicates an error on the account setup in the EdgeExpress Gateway.</summary>
        TSYSError = 900,
        ///<summary>901 Processor Error Can be Global or TSYS errors (900 Global Payments Error: or 900 TSYS Error:) are returned on transactions if a processor setting is not configured correctly. This can occur if the card or transaction type is not enabled on the Processing Account at the processor end.</summary>
        ProcessorError = 901,
        ///<summary>903 DCS Error These errors are returned on transactions if a processor setting is not configured correctly. This can occur if the transaction type is not enabled on the EdgeCheck Processing Account at the processor end. The reason for the error may be specified (e.g. NoValidationActionsSetup for Check Verification).</summary
        DCSError = 903,
    }

    ///<summary>Track which phase of the XWebResponse a given transaction is currently in. This will be used by the eConnector when monitoring and processing XWeb payments.</summary>
    public enum XWebTransactionStatus
    {
        HpfMonitoringError,
        HpfPending,
        HpfExpired,
        HpfCompletePaymentApproved,
        HpfCompletePaymentApprovedPartial,
        HpfCompleteAliasCreated,
        DtgPaymentApproved,
        DtgPaymentVoided,
        DtgPaymentReturned,
        DtgAliasDeleted,
        EdgeExpressMonitoringError,
        EdgeExpressPending,
        EdgeExpressExpired,
        EdgeExpressCompletePaymentApproved,
        EdgeExpressCompletePaymentApprovedPartial,
        EdgeExpressCompleteAliasCreated,
        EdgeExpressAliasDeleted,
        EdgeExpressAliasUpdated,
    };

    ///<summary>Transaction types avaialble for XWeb API. Not all are implemented.</summary>
    public enum XWebTransactionType
    {
        ///<summary>OTK status polling does not require a specific transaction type.</summary>
        PollOtkUnspecified,
        ///<summary>This transaction type is used to purchase goods and services. When a sale occurs, the cardholder's credit limit is checked to see if the funds are available. If the funds are available, an approval code is transmitted to the XWeb gateway and is forwarded to the POS device. If approved, the transaction is flagged for inclusion in the settlement batch.</summary>
        CreditSaleTransaction,
        ///<summary>This transaction will enable the merchant to obtain an "alias" of payment account information to be created and security stored at XWeb.</summary>
        AliasCreateTransaction,
        ///<summary>NOT IMPLEMENTED. A Check is accepted for payment of services and processed either as an ACH transaction or a Check21 transaction.</summary>
        CheckSaleTransaction,
        ///<summary>NOT IMPLEMENTED. This transaction will check the cardholder's funds and if the funds are sufficient for the purchase amount, the funds will be reserved on the cardholder's account for a period of time. A capture on this transaction will flag the transaction for settlement.</summary>
        CreditAuthTransaction,
        ///<summary>This transaction removes a Sale, Capture or Return transaction from the current batch. Also, a void can be used on an Authorization transaction to prevent it from being captured in the future. Finally, the Void transaction can be used to reverse the Authorization or Sale transaction, thereby restoring the open-to-buy amount on the consumer card.</summary>
        CreditVoidTransaction,
        ///<summary>This transaction will return the funds to a customer's account after settlement of the original batch has occurred.</summary>
        CreditReturnTransaction,
        ///<summary>NOT IMPLEMENTED. A credit is issued to a bank account via the ACH network.</summary>
        CheckCreditTransaction,
        ///<summary>NOT IMPLEMENTED. This transaction will allow the ability to create a check alias to account information securely stored at XWeb.</summary>
        CheckAliasCreateTransaction,
        ///<summary>NOT IMPLEMENTED. A SaleTransaction is identical to a CreditSaleTransaction, but allows a PIN-based DebitSaleTransaction to be initiated from the Hosted Payment Form. A PIN-based Debit Sale transaction can be performed by sending a SaleTransaction Request during the OTK Call. With a SaleTransaction Request, the Hosted Payment Form will appear identical to that for a CreditSaleTransaction Request, and support for the MagTek IPAD is available. If a PIN-based Debit Sale transaction is processed using the MagTek IPAD, then a DebitSaleTransaction will be sent to XWeb, and this transaction type will be returned during the Results Call.</summary>
        SaleTransaction,
        ///<summary>NOT IMPLEMENTED. This transaction type is used to process EMV Debit transactions using the Interac network. EMV Debit transactions require the XCharge Remote Client Manager to be installed on the local merchant PC and are only available to Global Canada merchants at this time.</summary>
        DebitSaleTransaction,
        ///<summary>NOT IMPLEMENTED. This transaction will return the funds to a customer's bank account using the Interac network. EMV Debit transactions require the XCharge Remote Client Manager to be installed on the local merchant PC and are only available to Global Canada merchants at this time.</summary>
        DebitReturnTransaction,
        ///<summary>This transaction will allow the merchant to delete a pre-existing account number that is on-file at the Edge Gateway.</summary>
        AliasDeleteTransaction,
        ///<summary>Value could not be parsed.</summary>
        Undefined,
        ///<summary>Used by EdgeExpress. This transaction type is used to purchase goods and services. When a sale occurs, the cardholder's credit limit 
        ///is checked to see if the funds are available. If the funds are available, an approval code is transmitted to the XWeb gateway and is forwarded 
        ///to the POS device. If approved, the transaction is flagged for inclusion in the settlement batch.</summary>
        CreditSale,
        ///<summary>Used by EdgeExpress to add an alias. This transaction will check the cardholder's funds and if the funds are sufficient for the 
        ///purchase amount, the  funds will be reserved on the cardholder's account for a period of time. A capture on this transaction will flag the 
        ///transaction for settlement.</summary>
        CreditAuth,
    };
}
