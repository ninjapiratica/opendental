using CodeBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;

namespace OpenDentBusiness.WebTypes.AutoComm
{
    public abstract class AutoCommSent : TableBase
    {
        ///<summary>FK to patient.PatNum for the corresponding patient.</summary>
        public long PatNum;
        ///<summary>FK to clinic.ClinicNum for the corresponding appointment.</summary>
        public long ClinicNum;
        ///<summary>Contact information used for sending a message.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string Contact;
        ///<summary>Indicates status of message.</summary>
        public AutoCommStatus SendStatus;
        ///<summary></summary>
        public CommType MessageType = CommType.Invalid;
        ///<summary>The template that will be used when creating the message.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string TemplateMessage;
        ///<summary>FK to primary key of appropriate table.</summary>
        [XmlIgnore]
        public long MessageFk;
        ///<summary>Subject of the message.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string Subject;
        ///<summary>Content of the message.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string Message;
        ///<summary>Generated by OD. Timestamp when row is created.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.DateTEntry)]
        [XmlIgnore]
        public DateTime DateTimeEntry;
        ///<summary>DateTime the message was sent.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.DateT)]
        [XmlIgnore]
        public DateTime DateTimeSent;
        ///<summary>Generated by OD in some cases and HQ in others. Any human readable error message generated by either HQ or EConnector. Used for debugging.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.IsText)]
        public string ResponseDescript;
        ///<summary>FK to apptreminderrule.ApptReminderRuleNum. Allows us to look up the rules to determine how to send this apptcomm out.</summary>
        public long ApptReminderRuleNum;
        ///<summary>If true then we need to consider the subject in an autocomm object</summary>
        [XmlIgnore]
        public bool HasSubject => MessageType.In(CommType.Email);

        #region Obsolete
        //These fields exist for the sole purpose of backward compatibility, as some of the classes derived from AutoCommSent have previously been serialized
        //and sent to HQ in the AutoComm algorithm.

        ///<summary>Deprecated.  Use MessageFK and MessageType instead.FK to message table, ex. smstomobile.GuidMessage. Generated at HQ.  References 
        ///'Mobile' to limit schema changes, since that field already existed and is serialized for payloads sent to WebServiceMainHQ.  May not necessarily 
        ///be an identifier in the smstomobile table, ex. could be an EmailMessage.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public string GuidMessageToMobile;

        #endregion

        public AutoCommSent Copy()
        {
            return (AutoCommSent)MemberwiseClone();
        }
    }

    public abstract class AutoCommAppt : AutoCommSent
    {
        ///<summary>Foreign key to the appointment represented by this AutoCommAppt.</summary>
        public long ApptNum;
        ///<summary>The Date and time of the original appointment. We need this in case the appointment was moved and needs another reminder sent out.</summary>
        [CrudColumn(SpecialType = CrudSpecialColType.DateT)]
        public DateTime ApptDateTime;
        ///<summary>This was the TSPrior used to send this reminder. </summary>
        [XmlIgnore]
        [CrudColumn(SpecialType = CrudSpecialColType.TimeSpanLong)]
        public TimeSpan TSPrior;
        ///<summary>A list of CalendarIcsInfo objects. Currently intended to be used by ThankYous, Reminder, and Confirmations for AddToCalendar tag replacements and
        ///generating ics files.</summary>
        [CrudColumn(IsNotDbColumn = true)]
        public List<CalendarIcsInfo> ListCalIcsInfos;

        ///<summary>Used only for serialization purposes</summary>
        [XmlElement("TSPrior", typeof(long))]
        public long TSPriorXml
        {
            get
            {
                return TSPrior.Ticks;
            }
            set
            {
                TSPrior = TimeSpan.FromTicks(value);
            }
        }
    }

    public abstract class AutoCommApptGuid : AutoCommAppt
    {
        ///<summary>Generated by HQ. Identifies this AutoCommGuid in future transactions between HQ and OD.</summary>
        public string ShortGUID;
    }

    public abstract class AutoCommGuid : AutoCommSent
    {
        ///<summary>Generated by HQ. Identifies this AutoCommGuid in future transactions between HQ and OD.</summary>
        public string ShortGUID;
    }

    ///<summary>Conatins the information used to generate CalendarIcs objects and .ics files. Attached as a list to AutoCommAppt objects.</summary>
    public class CalendarIcsInfo
    {
        public long PatNum;
        public string Title;
        public string Location;
        public long AptNum;
        public DateTime DateStart;
        public DateTime DateEnd;
        public string OfficeEmail;
        public CalMethod Method;

        public CalendarIcsInfo()
        {

        }
    }
    public enum CalMethod
    {
        [Description("REQUEST")]
        Request,
        [Description("CANCEL")]
        Cancel,
    }
}
