using CodeBase;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;

namespace OpenDentBusiness
{

    public class NewCrop
    {

        public static string NewCropPartnerName
        {
            get
            {
                string newCropName = PrefC.GetString(PrefName.NewCropName);
                if (newCropName != "")
                { //Distributors use this field to send different credentials. Thus, if blank, then send OD credentials.
                    return PrefC.GetString(PrefName.NewCropPartnerName);//Distributor
                }
                if (PrefC.GetBool(PrefName.NewCropIsLexiData))
                {
                    return "OpenDentalLexi";
                }
                else
                {//First Data Bank (FDB) customers.
                    return "OpenDental";
                }
            }
        }

        public static string NewCropAccountName
        {
            get
            {
                string newCropName = PrefC.GetString(PrefName.NewCropName);
                if (newCropName != "")
                { //Distributors use this field to send different credentials. Thus, if blank, then send OD credentials.
                    return newCropName;//Distributor
                }
                if (ODBuild.IsDebug())
                {
                    return CodeBase.MiscUtils.Decrypt("Xv40GArhEXYjEZxAE3Fw9g==");//Assigned by NewCrop. Used globally for all customers.
                }
                else
                {
                    //Assigned by NewCrop.  Used globally for all customers.
                    if (PrefC.GetBool(PrefName.NewCropIsLexiData))
                    {
                        return CodeBase.MiscUtils.Decrypt("22kFdicmXHDom20yKqaLIJAo0iq9fGvQnjjyV7Pb3Pn51zo0gjs0/h8eWNyCPO68");
                    }
                    else
                    {//First Data Bank (FDB) customers.
                        return CodeBase.MiscUtils.Decrypt("HumacKlUtM1MLCHsZY/PH86W10AY5u2bukFp15lEKhT6zD/aa9nG//zYzbYgpH8+");
                    }
                }
            }
        }

        public static string NewCropAccountPasssword
        {
            get
            {
                string newCropName = PrefC.GetString(PrefName.NewCropName);
                if (newCropName != "")
                { //Distributors use this field to send different credentials. Thus, if blank, then send OD credentials.
                    return PrefC.GetString(PrefName.NewCropPassword);//Distributor
                }
                if (ODBuild.IsDebug())
                {
                    return CodeBase.MiscUtils.Decrypt("Xv40GArhEXYjEZxAE3Fw9g==");//Assigned by NewCrop. Used globally for all customers.
                }
                else
                {
                    //Assigned by NewCrop. Used globally for all customers.
                    if (PrefC.GetBool(PrefName.NewCropIsLexiData))
                    {
                        return CodeBase.MiscUtils.Decrypt("tv9uB38IYv1dRddpVgJjDYD9JlEpPhWd3VpmXd9KtpS7DkOxUdYt8ggS+tFZeYsv");
                    }
                    else
                    {//First Data Bank (FDB) customers.
                        return CodeBase.MiscUtils.Decrypt("I0Itlo5F3ZOYUSwMKpgbY5X6++XpUetMvrqj0vVB7bKzYwJlWtsLiFFgpMBplLaH");
                    }
                }
            }
        }

        public static string NewCropProductName
        {
            get { return "OpenDental"; }
        }

        public static string NewCropProductVersion
        {
            get { return Assembly.GetAssembly(typeof(Db)).GetName().Version.ToString(); }
        }

        ///<summary>Returns false if account ID is blank or not in format of 1 or more digits, followed by 3 random alpha-numberic characters, followed by a 2 digit checksum. Only returns true when the NewCrop Account ID is one that was created by OD.</summary>
        public static bool NewCropIsAccountIdValid()
        {
            bool validKey = false;
            string newCropAccountId = PrefC.GetString(PrefName.NewCropAccountId);
            if (Regex.IsMatch(newCropAccountId, "[0-9]+\\-[0-9A-Za-z]{3}[0-9]{2}"))
            { //Must contain at least 1 digit for patnum, 1 dash, 3 random alpha-numeric characters, then 2 digits for checksum.
              //Verify key checksum to make certain that this key was generated by OD and not a reseller.
                long patNum = PIn.Long(newCropAccountId.Substring(0, newCropAccountId.IndexOf('-')));
                long checkSum = patNum;
                checkSum += Convert.ToByte(newCropAccountId[newCropAccountId.IndexOf('-') + 1]) * 3;
                checkSum += Convert.ToByte(newCropAccountId[newCropAccountId.IndexOf('-') + 2]) * 5;
                checkSum += Convert.ToByte(newCropAccountId[newCropAccountId.IndexOf('-') + 3]) * 7;
                if ((checkSum % 100).ToString().PadLeft(2, '0') == newCropAccountId.Substring(newCropAccountId.Length - 2))
                {
                    validKey = true;
                }
            }
            return validKey;
        }

        ///<summary>Throws exceptions. Returns true if new prescription data is received from NewCrop. Explictly passing the listNewRx by reference so that we can reassign it. Essentially using it as an out parameter. Used for automation in the Chart Module.</summary>
        public static bool RefreshPrescriptions(long patNum, ref List<RxPat> listNewRx)
        {
            Program programNewCrop = Programs.GetCur(ProgramName.eRx);
            ErxOption erxOption = PIn.Enum<ErxOption>(ProgramProperties.GetPropForProgByDesc(programNewCrop.ProgramNum, Erx.PropertyDescs.ErxOption).PropertyValue);
            if (erxOption != ErxOption.NewCrop && erxOption != ErxOption.DoseSpotWithNewCrop)
            {
                return false;
            }
            string newCropAccountId = PrefC.GetString(PrefName.NewCropAccountId);
            if (newCropAccountId == "")
            {//We check for NewCropAccountID validity below, but we also need to be sure to exit this check for resellers if blank.
                return false;
            }
            if (!NewCropIsAccountIdValid())
            {
                //The NewCropAccountID will be invalid for resellers, because the checksum will be wrong.
                //Therefore, resellers should be allowed to continue if both the NewCropName and NewCropPassword are specified. NewCrop does not allow blank passwords.
                if (PrefC.GetString(PrefName.NewCropName) == "" || PrefC.GetString(PrefName.NewCropPassword) == "")
                {
                    return false;
                }
            }
            NewCropWebService.Update1 wsNewCrop = new NewCropWebService.Update1();//New Crop web services interface.
            NewCropWebService.Credentials credentials = new NewCropWebService.Credentials();
            NewCropWebService.AccountRequest accountRequest = new NewCropWebService.AccountRequest();
            NewCropWebService.PatientRequest patientRequest = new NewCropWebService.PatientRequest();
            NewCropWebService.PrescriptionHistoryRequest prescriptionHistoryRequest = new NewCropWebService.PrescriptionHistoryRequest();
            NewCropWebService.PatientInformationRequester patientInfoRequester = new NewCropWebService.PatientInformationRequester();
            NewCropWebService.Result response = new NewCropWebService.Result();
            string newCropURL = Introspection.GetOverride(Introspection.IntrospectionEntity.NewCropUpdate1URL, "https://secure.newcropaccounts.com/v7/WebServices/Update1.asmx");
            if (ODBuild.IsDebug())
            {
                newCropURL = "https://preproduction.newcropaccounts.com/v7/WebServices/Update1.asmx";
            }
            wsNewCrop.Url = newCropURL;
            credentials.PartnerName = NewCropPartnerName;
            credentials.Name = NewCropAccountName;
            credentials.Password = NewCropAccountPasssword;
            accountRequest.AccountId = newCropAccountId;
            accountRequest.SiteId = "1";//Accounts are always created with SiteId=1.
            patientRequest.PatientId = POut.Long(patNum);
            prescriptionHistoryRequest.StartHistory = new DateTime(2012, 11, 2);//Only used for archived prescriptions. This is the date of first release for NewCrop integration.
            prescriptionHistoryRequest.EndHistory = DateTime.Now;//Only used for archived prescriptions.
                                                                 //Prescription Archive Status Values:
                                                                 //N = Not archived (i.e. Current Medication) 
                                                                 //Y = Archived (i.e. Previous Mediation)
                                                                 //% = Both Not Archived and Archived
                                                                 //Note: This field will contain values other than Y,N in future releases.
            prescriptionHistoryRequest.PrescriptionArchiveStatus = "N";
            //Prescription Status Values:
            //C = Completed Prescription
            //P = Pending Medication
            //% = Both C and P.
            prescriptionHistoryRequest.PrescriptionStatus = "C";
            //Prescription Sub Status Values:
            //% = All meds (Returns all meds regardless of the sub status)
            //A = NS (Returns only meds that have a 'NS' - Needs staff sub status)
            //U = DR (Returns only meds that have a 'DR' - Needs doctor review sub status)
            //P = Renewal Request that has been selected for processing on the NewCrop screens - it has not yet been denied, denied and re-written or accepted
            //S = Standard Rx (Returns only meds that have an 'InProc' - InProcess sub status)
            //D = DrugSet source - indicates the prescription was created by selecting the medication from the DrugSet selection box on the ComposeRx page
            //O = Outside Prescription - indicates the prescription was created on the MedEntry page, not prescribed.
            prescriptionHistoryRequest.PrescriptionSubStatus = "S";
            patientInfoRequester.UserType = "Staff";//Allowed values: Doctor,Staff
            if (Security.CurUser.ProvNum != 0)
            {//If the current OD user is associated to a doctor, then the request is from a doctor, otherwise from a staff member.
                patientInfoRequester.UserType = "Doctor";
            }
            patientInfoRequester.UserId = POut.Long(Security.CurUser.UserNum);
            //Send the request to NewCrop. Always returns all current medications, and returns medications between the StartHistory and EndHistory dates if requesting archived medications.
            //The patientIdType parameter was added for another vendor and is not often used. We do not use this field. We must pass empty string.
            //The includeSchema parameter is useful for first-time debugging, but in release mode, we should pass N for no.
            wsNewCrop.Timeout = 3000;//3 second. The default is 100 seconds, but we cannot wait that long, because prescriptions are checked each time the Chart is refreshed. 1 second is too little, 2 seconds works most of the time. 3 seconds is safe.
                                     //throw new Exception("Test communication error in debug mode.");
            response = wsNewCrop.GetPatientFullMedicationHistory6(credentials, accountRequest, patientRequest, prescriptionHistoryRequest, patientInfoRequester, "", "N");
            //response.Message = Error message if error.
            //response.RowCount = Number of prescription records returned.
            //response.Status = Status of request. "OK" = success.
            //response.Timing = Not sure what this is for. Tells us how quickly the server responded to the request?
            //response.XmlResponse = The XML data returned, encoded in base 64.
            if (response.Status != NewCropWebService.StatusType.OK)
            {//Other statuses include Fail (ex if credentials are invalid), NotFound (ex if patientId invalid or accoundId invalid), Unknown (no known examples yet)
             //For now we simply abort gracefully.
                return false;
            }
            byte[] xmlResponseBytes = Convert.FromBase64String(response.XmlResponse);
            string xmlResponse = Encoding.UTF8.GetString(xmlResponseBytes);
            if (xmlResponse == "")
            {//An empty result means that the patient does not currently have any active medications in eRx.
                xmlResponse = "<emptyResult/>";//At least one node is needed below to prevent crashing.
                                               //We need to continue to the bottom of this function even when there are no active medications,
                                               //so that we can discontinue any medications in the database which were active that are now discontinued in eRx.
            }
            if (ODBuild.IsDebug())
            {
                //For capturing the xmlReponse with the newlines properly showing.
                string tempFile = PrefC.GetRandomTempFile(".txt");
                File.WriteAllText(tempFile, xmlResponse);
            }
            XmlDocument xml = new XmlDocument();
            try
            {
                xml.LoadXml(xmlResponse);
            }
            catch
            { //In case NewCrop returns invalid XML.
                return false;//abort gracefully
            }
            DateTime rxStartDateT = PrefC.GetDateT(PrefName.ElectronicRxDateStartedUsing131);
            XmlNode nodeNewDataSet = xml.FirstChild;
            List<long> listActiveMedicationPatNums = new List<long>();
            listNewRx = new List<RxPat>();
            foreach (XmlNode nodeTable in nodeNewDataSet.ChildNodes)
            {
                RxPat rxOld = null;
                MedicationPat medOrderOld = null;
                RxPat rx = new RxPat();
                //rx.IsControlled not important.  Only used in sending, but this Rx was already sent.
                rx.Disp = "";
                rx.DosageCode = "";
                rx.Drug = "";
                rx.Notes = "";
                rx.Refills = "";
                rx.SendStatus = RxSendStatus.Unsent;
                rx.Sig = "";
                rx.ErxPharmacyInfo = "";
                string additionalSig = "";
                bool isProv = true;
                long rxCui = 0;
                string strDrugName = "";
                string strGenericName = "";
                string strProvNumOrNpi = "";//We used to send ProvNum in LicensedPrescriber.ID to NewCrop, but now we send NPI. We will receive ProvNum for older prescriptions.
                string drugInfo = "";
                string externalDrugConcept = "";
                foreach (XmlNode nodeRxFieldParent in nodeTable.ChildNodes)
                {
                    XmlNode nodeRxField = nodeRxFieldParent.FirstChild;
                    if (nodeRxField == null)
                    {
                        continue;
                    }
                    switch (nodeRxFieldParent.Name.ToLower())
                    {
                        case "deaclasscode":
                            //According to Brian from NewCrop:
                            //"Possible values are 0 = unscheduled, schedules 1-5, and 9 = unknown.
                            //Some states categorize a drug as scheduled, but do not assign a particular level."
                            rx.IsControlled = false;
                            if (nodeRxField.Value != "0")
                            {
                                rx.IsControlled = true;
                            }
                            break;
                        case "dispense"://ex 5.555
                            rx.Disp = nodeRxField.Value;
                            break;
                        case "druginfo"://ex lisinopril 5 mg Tab
                            drugInfo = nodeRxField.Value;
                            break;
                        case "drugname"://ex lisinopril
                            strDrugName = nodeRxField.Value;
                            break;
                        case "externaldrugconcept":
                            externalDrugConcept = nodeRxField.Value;//ex "ingredient1, ingredient 2"
                            break;
                        case "externalpatientid"://patnum passed back from the compose request that initiated this prescription
                            rx.PatNum = PIn.Long(nodeRxField.Value);
                            break;
                        case "externalphysicianid"://NPI passed back from the compose request that initiated this prescription.  For older prescriptions, this will be ProvNum.
                            strProvNumOrNpi = nodeRxField.Value;
                            break;
                        case "externaluserid"://The person who ordered the prescription. Is a ProvNum when provider, or an EmployeeNum when an employee. If EmployeeNum, then is prepended with "emp" because of how we sent it to NewCrop in the first place.
                            if (nodeRxField.Value.StartsWith("emp"))
                            {
                                isProv = false;
                            }
                            break;
                        case "finaldestinationtype":
                            //According to Brian from NewCrop:
                            //FinalDestinationType - Indicates the transmission method from NewCrop to the receiving entity.
                            //0=Not Transmitted
                            //1=Print
                            //2=Fax
                            //3=Electronic/Surescripts Retail
                            //4=Electronic/Surescripts Mail Order
                            //5=Test
                            if (nodeRxField.Value == "0")
                            {//Not Transmitted
                                rx.SendStatus = RxSendStatus.Unsent;
                            }
                            else if (nodeRxField.Value == "1")
                            {//Print
                                rx.SendStatus = RxSendStatus.Printed;
                            }
                            else if (nodeRxField.Value == "2")
                            {//Fax
                                rx.SendStatus = RxSendStatus.Faxed;
                            }
                            else if (nodeRxField.Value == "3")
                            {//Electronic/Surescripts Retail
                                rx.SendStatus = RxSendStatus.SentElect;
                            }
                            else if (nodeRxField.Value == "4")
                            {//Electronic/Surescripts Mail Order
                                rx.SendStatus = RxSendStatus.SentElect;
                            }
                            else if (nodeRxField.Value == "5")
                            {//Test
                                rx.SendStatus = RxSendStatus.Unsent;
                            }
                            break;
                        case "genericname":
                            strGenericName = nodeRxField.Value;
                            break;
                        case "patientfriendlysig"://The concat of all the codified fields.
                            rx.Sig = nodeRxField.Value;
                            break;
                        case "pharmacyncpdp"://ex 9998888
                                             //We will use this information in the future to find a pharmacy already entered into OD, or to create one dynamically if it does not exist.
                                             //rx.PharmacyNum;//Get the pharmacy where pharmacy.PharmID = node.Value
                            break;
                        case "prescriptiondate":
                            rx.RxDate = PIn.DateT(nodeRxField.Value);
                            break;
                        case "prescriptionguid"://32 characters with 4 hyphens. ex ba4d4a84-af0a-4cbf-9437-36feda97d1b6
                            rx.ErxGuid = nodeRxField.Value;
                            rxOld = RxPats.GetErxByIdForPat(nodeRxField.Value);
                            medOrderOld = MedicationPats.GetMedicationOrderByErxIdAndPat(nodeRxField.Value, patNum);
                            break;
                        case "prescriptionnotes"://from the Additional Sig box at the bottom
                            additionalSig = nodeRxField.Value;
                            break;
                        case "refills"://ex 1
                            rx.Refills = nodeRxField.Value;
                            break;
                        case "rxcui"://ex 311354
                            rxCui = PIn.Long(nodeRxField.Value);//The RxCui is not returned with all prescriptions, so it can be zero (not set).
                            break;
                        case "pharmacyfullinfo":
                            rx.ErxPharmacyInfo = nodeRxField.Value;
                            break;
                    }
                }//end inner foreach
                if (rx.RxDate < rxStartDateT)
                {//Ignore prescriptions created before version 13.1.14, because those prescriptions were entered manually by the user.
                    continue;
                }
                if (additionalSig != "")
                {
                    if (rx.Sig != "")
                    {//If patient friend SIG is present.
                        rx.Sig += " ";
                    }
                    rx.Sig += additionalSig;
                }
                rx.Drug = drugInfo;
                if ((drugInfo == "" || drugInfo.ToLower() == "none") && externalDrugConcept != "")
                {
                    rx.Drug = externalDrugConcept;
                }
                //Determine the provider. This is a mess, because we used to send ProvNum in the outgoing XML LicensedPrescriber.ID,
                //but now we send NPI to avoid multiple billing charges for two provider records with the same NPI
                //(the same doctor entered multiple times, for example, one provider for each clinic).
                ErxLog erxLog = ErxLogs.GetLatestForPat(rx.PatNum, rx.RxDate);//Locate the original request corresponding to this prescription.
                if (erxLog != null && erxLog.ProvNum != 0 && erxLog.DateTStamp.Date == rx.RxDate.Date)
                {
                    Provider provErxLog = Providers.GetFirstOrDefault(x => x.ProvNum == erxLog.ProvNum);
                    if ((strProvNumOrNpi.Length == 10 && provErxLog.NationalProvID == strProvNumOrNpi) || erxLog.ProvNum.ToString() == strProvNumOrNpi)
                    {
                        rx.ProvNum = erxLog.ProvNum;
                    }
                }
                if (rx.ProvNum == 0)
                {//Not found or the provnum is unknown.
                 //The erxLog.ProvNum will be 0 for prescriptions fetched from NewCrop before version 13.3. Could also happen if
                 //prescriptions were created when NewCrop was brand new (right before ErxLog was created),
                 //or if someone lost a database and they are downloading all the prescriptions from scratch again.
                    if (rxOld == null)
                    {//The prescription is being dowloaded for the first time, or is being downloaded again after it was deleted manually by the user.
                        List<Provider> listProviders = Providers.GetDeepCopy(true);
                        for (int j = 0; j < listProviders.Count; j++)
                        {//Try to locate a visible provider matching the NPI on the prescription.
                            if (strProvNumOrNpi.Length == 10 && listProviders[j].NationalProvID == strProvNumOrNpi)
                            {
                                rx.ProvNum = listProviders[j].ProvNum;
                                break;
                            }
                        }
                        if (rx.ProvNum == 0)
                        {//No visible provider found matching the NPI on the prescription.
                         //Try finding a hidden provider matching the NPI on the prescription, or a matching provnum.
                            Provider provider = Providers.GetFirstOrDefault(x => x.NationalProvID == strProvNumOrNpi);
                            if (provider == null)
                            {
                                provider = Providers.GetFirstOrDefault(x => x.ProvNum.ToString() == strProvNumOrNpi);
                            }
                            if (provider != null)
                            {
                                rx.ProvNum = provider.ProvNum;
                            }
                        }
                        //If rx.ProvNum is still zero, then that means the provider NPI/ProvNum has been modified or somehow deleted (for example, database was lost) for the provider record originally used.
                        if (rx.ProvNum == 0)
                        {//Catch all
                            Provider provUnknown = Providers.GetFirstOrDefault(x => x.FName == "ERX" && x.LName == "UNKNOWN");
                            if (provUnknown != null)
                            {
                                rx.ProvNum = provUnknown.ProvNum;
                            }
                            if (provUnknown == null)
                            {
                                provUnknown = new Provider();
                                provUnknown.Abbr = "UNK";
                                provUnknown.FName = "ERX";
                                provUnknown.LName = "UNKNOWN";
                                provUnknown.IsHidden = true;
                                rx.ProvNum = Providers.Insert(provUnknown);
                                Providers.RefreshCache();
                            }
                        }
                    }
                    else
                    {//The prescription has already been downloaded in the past.
                        rx.ProvNum = rxOld.ProvNum;//Preserve the provnum if already in the database, because it may have already been corrected by the user after the previous download.
                    }
                }
                long medicationPatNum = Erx.InsertOrUpdateErxMedication(rxOld, rx, rxCui, strDrugName, strGenericName, isProv);
                listActiveMedicationPatNums.Add(medicationPatNum);
                if (rxOld == null)
                {//Only add the rx if it is new.  We don't want to trigger automation for existing prescriptions.
                    listNewRx.Add(rx);
                }
            }//end foreach
            List<MedicationPat> listAllMedicationsForPatient = MedicationPats.Refresh(patNum, false);
            foreach (MedicationPat medication in listAllMedicationsForPatient)
            {
                if (!Erx.IsFromNewCrop(medication.ErxGuid))
                {
                    continue;//This medication is not an eRx medicaiton.  It was entered manually inside OD.
                }
                if (listActiveMedicationPatNums.Contains(medication.MedicationPatNum))
                {
                    continue;//The medication is still active.
                }
                //The medication was discontinued inside the eRx interface.
                medication.DateStop = DateTime.Today.AddDays(-1);//Discontinue the medication as of yesterday so that it will immediately show as discontinued.
                MedicationPats.Update(medication);//Discontinue the medication inside OD to match what shows in the eRx interface.
            }//end foreach
            return true;
        }

        public static PersonNameType GetPersonNameForProvider(Provider prov)
        {
            //No need to check MiddleTierRole; no call to db.
            PersonNameType personName = new PersonNameType();
            personName.last = prov.LName.Trim();//Cannot be blank.
            personName.first = prov.FName.Trim();//Cannot be blank.
            personName.middle = prov.MI;//May be blank.
            if (prov.Suffix != "")
            {
                personName.suffixSpecified = true;
                personName.suffix = PersonNameSuffix.DDS;
                string[] suffixes = prov.Suffix.ToUpper().Split(' ', '.');
                for (int i = 0; i < suffixes.Length; i++)
                {
                    if (suffixes[i] == "ABOC")
                    {
                        personName.suffix = PersonNameSuffix.ABOC;
                        break;
                    }
                    else if (suffixes[i] == "ANP")
                    {
                        personName.suffix = PersonNameSuffix.ANP;
                        break;
                    }
                    else if (suffixes[i] == "APRN")
                    {
                        personName.suffix = PersonNameSuffix.APRN;
                        break;
                    }
                    else if (suffixes[i] == "ARNP")
                    {
                        personName.suffix = PersonNameSuffix.ARNP;
                        break;
                    }
                    else if (suffixes[i] == "CNM")
                    {
                        personName.suffix = PersonNameSuffix.CNM;
                        break;
                    }
                    else if (suffixes[i] == "CNP")
                    {
                        personName.suffix = PersonNameSuffix.CNP;
                        break;
                    }
                    else if (suffixes[i] == "CNS")
                    {
                        personName.suffix = PersonNameSuffix.CNS;
                        break;
                    }
                    else if (suffixes[i] == "CRNP")
                    {
                        personName.suffix = PersonNameSuffix.CRNP;
                        break;
                    }
                    else if (suffixes[i] == "DDS")
                    {
                        personName.suffix = PersonNameSuffix.DDS;
                        break;
                    }
                    else if (suffixes[i] == "DMD")
                    {
                        personName.suffix = PersonNameSuffix.DMD;
                        break;
                    }
                    else if (suffixes[i] == "DO")
                    {
                        personName.suffix = PersonNameSuffix.DO;
                        break;
                    }
                    else if (suffixes[i] == "DPM")
                    {
                        personName.suffix = PersonNameSuffix.DPM;
                        break;
                    }
                    else if (suffixes[i] == "ESQ")
                    {//ESQ or Esq
                        personName.suffix = PersonNameSuffix.ESQ;
                        break;
                    }
                    else if (suffixes[i] == "ESQ1")
                    {//ESQ1 or Esq1
                        personName.suffix = PersonNameSuffix.ESQ1;
                        break;
                    }
                    else if (suffixes[i] == "FACC")
                    {
                        personName.suffix = PersonNameSuffix.FACC;
                        break;
                    }
                    else if (suffixes[i] == "FACP")
                    {
                        personName.suffix = PersonNameSuffix.FACP;
                        break;
                    }
                    else if (suffixes[i] == "FNP")
                    {
                        personName.suffix = PersonNameSuffix.FNP;
                        break;
                    }
                    else if (suffixes[i] == "GNP")
                    {
                        personName.suffix = PersonNameSuffix.GNP;
                        break;
                    }
                    else if (suffixes[i] == "I")
                    {
                        personName.suffix = PersonNameSuffix.I;
                        break;
                    }
                    else if (suffixes[i] == "II")
                    {
                        personName.suffix = PersonNameSuffix.II;
                        break;
                    }
                    else if (suffixes[i] == "III")
                    {
                        personName.suffix = PersonNameSuffix.III;
                        break;
                    }
                    else if (suffixes[i] == "IV")
                    {
                        personName.suffix = PersonNameSuffix.IV;
                        break;
                    }
                    else if (suffixes[i] == "JR")
                    {//JR or jr
                        personName.suffix = PersonNameSuffix.Jr;
                        break;
                    }
                    else if (suffixes[i] == "JR1")
                    {//JR1 or jr1
                        personName.suffix = PersonNameSuffix.Jr;
                        break;
                    }
                    else if (suffixes[i] == "LPN")
                    {
                        personName.suffix = PersonNameSuffix.LPN;
                        break;
                    }
                    else if (suffixes[i] == "LVN")
                    {
                        personName.suffix = PersonNameSuffix.LVN;
                        break;
                    }
                    else if (suffixes[i] == "MA")
                    {
                        personName.suffix = PersonNameSuffix.MA;
                        break;
                    }
                    else if (suffixes[i] == "MD")
                    {
                        personName.suffix = PersonNameSuffix.MD;
                        break;
                    }
                    else if (suffixes[i] == "NB")
                    {
                        personName.suffix = PersonNameSuffix.NB;
                        break;
                    }
                    else if (suffixes[i] == "ND")
                    {
                        personName.suffix = PersonNameSuffix.ND;
                        break;
                    }
                    else if (suffixes[i] == "NP")
                    {
                        personName.suffix = PersonNameSuffix.NP;
                        break;
                    }
                    else if (suffixes[i] == "OD")
                    {
                        personName.suffix = PersonNameSuffix.OD;
                        break;
                    }
                    else if (suffixes[i] == "PA")
                    {
                        personName.suffix = PersonNameSuffix.PA;
                        break;
                    }
                    else if (suffixes[i] == "PAC")
                    {
                        personName.suffix = PersonNameSuffix.PAC;
                        break;
                    }
                    else if (suffixes[i] == "PHARMD")
                    {//PARMD or PharmD
                        personName.suffix = PersonNameSuffix.PharmD;
                        break;
                    }
                    else if (suffixes[i] == "PHD")
                    {//PHD or PhD
                        personName.suffix = PersonNameSuffix.PhD;
                        break;
                    }
                    else if (suffixes[i] == "PNP")
                    {
                        personName.suffix = PersonNameSuffix.PNP;
                        break;
                    }
                    else if (suffixes[i] == "RD")
                    {
                        personName.suffix = PersonNameSuffix.RD;
                        break;
                    }
                    else if (suffixes[i] == "RN")
                    {
                        personName.suffix = PersonNameSuffix.RN;
                        break;
                    }
                    else if (suffixes[i] == "RPAC")
                    {
                        personName.suffix = PersonNameSuffix.RPAC;
                        break;
                    }
                    else if (suffixes[i] == "RPH")
                    {//RPH or RPh
                        personName.suffix = PersonNameSuffix.RPh;
                        break;
                    }
                    else if (suffixes[i] == "SR")
                    {//SR or Sr
                        personName.suffix = PersonNameSuffix.Sr;
                        break;
                    }
                    else if (suffixes[i] == "SR1")
                    {//SR1 or Sr1
                        personName.suffix = PersonNameSuffix.Sr1;
                        break;
                    }
                    else if (suffixes[i] == "V")
                    {
                        personName.suffix = PersonNameSuffix.V;
                        break;
                    }
                    else if (suffixes[i] == "VI")
                    {
                        personName.suffix = PersonNameSuffix.VI;
                        break;
                    }
                }
            }
            return personName;
        }
    }
}
