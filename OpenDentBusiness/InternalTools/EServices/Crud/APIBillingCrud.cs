//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace OpenDentBusiness.Crud
{
    public class APIBillingCrud
    {
        ///<summary>Gets one APIBilling object from the database using the primary key.  Returns null if not found.</summary>
        public static APIBilling SelectOne(long aPIBillingNum)
        {
            string command = "SELECT * FROM apibilling "
                + "WHERE APIBillingNum = " + POut.Long(aPIBillingNum);
            List<APIBilling> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets one APIBilling object from the database using a query.</summary>
        public static APIBilling SelectOne(string command)
        {
            if (RemotingClient.MiddleTierRole == MiddleTierRole.ClientMT)
            {
                throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
            }
            List<APIBilling> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets a list of APIBilling objects from the database using a query.</summary>
        public static List<APIBilling> SelectMany(string command)
        {
            if (RemotingClient.MiddleTierRole == MiddleTierRole.ClientMT)
            {
                throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
            }
            List<APIBilling> list = TableToList(Db.GetTable(command));
            return list;
        }

        ///<summary>Converts a DataTable to a list of objects.</summary>
        public static List<APIBilling> TableToList(DataTable table)
        {
            List<APIBilling> retVal = new List<APIBilling>();
            APIBilling aPIBilling;
            foreach (DataRow row in table.Rows)
            {
                aPIBilling = new APIBilling();
                aPIBilling.APIBillingNum = PIn.Long(row["APIBillingNum"].ToString());
                aPIBilling.CustPatNum = PIn.Long(row["CustPatNum"].ToString());
                aPIBilling.BillingCycleDay = PIn.Int(row["BillingCycleDay"].ToString());
                aPIBilling.DateTimeEntry = PIn.DateT(row["DateTimeEntry"].ToString());
                aPIBilling.DateTimeProceduresPosted = PIn.DateT(row["DateTimeProceduresPosted"].ToString());
                aPIBilling.DateOfBill = PIn.Date(row["DateOfBill"].ToString());
                aPIBilling.MonthOfBill = PIn.Date(row["MonthOfBill"].ToString());
                aPIBilling.ProceduresJson = PIn.String(row["ProceduresJson"].ToString());
                retVal.Add(aPIBilling);
            }
            return retVal;
        }

        ///<summary>Converts a list of APIBilling into a DataTable.</summary>
        public static DataTable ListToTable(List<APIBilling> listAPIBillings, string tableName = "")
        {
            if (string.IsNullOrEmpty(tableName))
            {
                tableName = "APIBilling";
            }
            DataTable table = new DataTable(tableName);
            table.Columns.Add("APIBillingNum");
            table.Columns.Add("CustPatNum");
            table.Columns.Add("BillingCycleDay");
            table.Columns.Add("DateTimeEntry");
            table.Columns.Add("DateTimeProceduresPosted");
            table.Columns.Add("DateOfBill");
            table.Columns.Add("MonthOfBill");
            table.Columns.Add("ProceduresJson");
            foreach (APIBilling aPIBilling in listAPIBillings)
            {
                table.Rows.Add(new object[] {
                    POut.Long  (aPIBilling.APIBillingNum),
                    POut.Long  (aPIBilling.CustPatNum),
                    POut.Int   (aPIBilling.BillingCycleDay),
                    POut.DateT (aPIBilling.DateTimeEntry,false),
                    POut.DateT (aPIBilling.DateTimeProceduresPosted,false),
                    POut.DateT (aPIBilling.DateOfBill,false),
                    POut.DateT (aPIBilling.MonthOfBill,false),
                                aPIBilling.ProceduresJson,
                });
            }
            return table;
        }

        ///<summary>Inserts one APIBilling into the database.  Returns the new priKey.</summary>
        public static long Insert(APIBilling aPIBilling)
        {
            return Insert(aPIBilling, false);
        }

        ///<summary>Inserts one APIBilling into the database.  Provides option to use the existing priKey.</summary>
        public static long Insert(APIBilling aPIBilling, bool useExistingPK)
        {
            if (!useExistingPK && PrefC.RandomKeys)
            {
                aPIBilling.APIBillingNum = ReplicationServers.GetKey("apibilling", "APIBillingNum");
            }
            string command = "INSERT INTO apibilling (";
            if (useExistingPK || PrefC.RandomKeys)
            {
                command += "APIBillingNum,";
            }
            command += "CustPatNum,BillingCycleDay,DateTimeEntry,DateTimeProceduresPosted,DateOfBill,MonthOfBill,ProceduresJson) VALUES(";
            if (useExistingPK || PrefC.RandomKeys)
            {
                command += POut.Long(aPIBilling.APIBillingNum) + ",";
            }
            command +=
                     POut.Long(aPIBilling.CustPatNum) + ","
                + POut.Int(aPIBilling.BillingCycleDay) + ","
                + DbHelper.Now() + ","
                + POut.DateT(aPIBilling.DateTimeProceduresPosted) + ","
                + POut.Date(aPIBilling.DateOfBill) + ","
                + POut.Date(aPIBilling.MonthOfBill) + ","
                + DbHelper.ParamChar + "paramProceduresJson)";
            if (aPIBilling.ProceduresJson == null)
            {
                aPIBilling.ProceduresJson = "";
            }
            OdSqlParameter paramProceduresJson = new OdSqlParameter("paramProceduresJson", OdDbType.Text, POut.StringParam(aPIBilling.ProceduresJson));
            if (useExistingPK || PrefC.RandomKeys)
            {
                Db.NonQ(command, paramProceduresJson);
            }
            else
            {
                aPIBilling.APIBillingNum = Db.NonQ(command, true, "APIBillingNum", "aPIBilling", paramProceduresJson);
            }
            return aPIBilling.APIBillingNum;
        }

        ///<summary>Inserts one APIBilling into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        public static long InsertNoCache(APIBilling aPIBilling)
        {
            return InsertNoCache(aPIBilling, false);
        }

        ///<summary>Inserts one APIBilling into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        public static long InsertNoCache(APIBilling aPIBilling, bool useExistingPK)
        {
            bool isRandomKeys = Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
            string command = "INSERT INTO apibilling (";
            if (!useExistingPK && isRandomKeys)
            {
                aPIBilling.APIBillingNum = ReplicationServers.GetKeyNoCache("apibilling", "APIBillingNum");
            }
            if (isRandomKeys || useExistingPK)
            {
                command += "APIBillingNum,";
            }
            command += "CustPatNum,BillingCycleDay,DateTimeEntry,DateTimeProceduresPosted,DateOfBill,MonthOfBill,ProceduresJson) VALUES(";
            if (isRandomKeys || useExistingPK)
            {
                command += POut.Long(aPIBilling.APIBillingNum) + ",";
            }
            command +=
                     POut.Long(aPIBilling.CustPatNum) + ","
                + POut.Int(aPIBilling.BillingCycleDay) + ","
                + DbHelper.Now() + ","
                + POut.DateT(aPIBilling.DateTimeProceduresPosted) + ","
                + POut.Date(aPIBilling.DateOfBill) + ","
                + POut.Date(aPIBilling.MonthOfBill) + ","
                + DbHelper.ParamChar + "paramProceduresJson)";
            if (aPIBilling.ProceduresJson == null)
            {
                aPIBilling.ProceduresJson = "";
            }
            OdSqlParameter paramProceduresJson = new OdSqlParameter("paramProceduresJson", OdDbType.Text, POut.StringParam(aPIBilling.ProceduresJson));
            if (useExistingPK || isRandomKeys)
            {
                Db.NonQ(command, paramProceduresJson);
            }
            else
            {
                aPIBilling.APIBillingNum = Db.NonQ(command, true, "APIBillingNum", "aPIBilling", paramProceduresJson);
            }
            return aPIBilling.APIBillingNum;
        }

        ///<summary>Updates one APIBilling in the database.</summary>
        public static void Update(APIBilling aPIBilling)
        {
            string command = "UPDATE apibilling SET "
                + "CustPatNum              =  " + POut.Long(aPIBilling.CustPatNum) + ", "
                + "BillingCycleDay         =  " + POut.Int(aPIBilling.BillingCycleDay) + ", "
                //DateTimeEntry not allowed to change
                + "DateTimeProceduresPosted=  " + POut.DateT(aPIBilling.DateTimeProceduresPosted) + ", "
                + "DateOfBill              =  " + POut.Date(aPIBilling.DateOfBill) + ", "
                + "MonthOfBill             =  " + POut.Date(aPIBilling.MonthOfBill) + ", "
                + "ProceduresJson          =  " + DbHelper.ParamChar + "paramProceduresJson "
                + "WHERE APIBillingNum = " + POut.Long(aPIBilling.APIBillingNum);
            if (aPIBilling.ProceduresJson == null)
            {
                aPIBilling.ProceduresJson = "";
            }
            OdSqlParameter paramProceduresJson = new OdSqlParameter("paramProceduresJson", OdDbType.Text, POut.StringParam(aPIBilling.ProceduresJson));
            Db.NonQ(command, paramProceduresJson);
        }

        ///<summary>Updates one APIBilling in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        public static bool Update(APIBilling aPIBilling, APIBilling oldAPIBilling)
        {
            string command = "";
            if (aPIBilling.CustPatNum != oldAPIBilling.CustPatNum)
            {
                if (command != "") { command += ","; }
                command += "CustPatNum = " + POut.Long(aPIBilling.CustPatNum) + "";
            }
            if (aPIBilling.BillingCycleDay != oldAPIBilling.BillingCycleDay)
            {
                if (command != "") { command += ","; }
                command += "BillingCycleDay = " + POut.Int(aPIBilling.BillingCycleDay) + "";
            }
            //DateTimeEntry not allowed to change
            if (aPIBilling.DateTimeProceduresPosted != oldAPIBilling.DateTimeProceduresPosted)
            {
                if (command != "") { command += ","; }
                command += "DateTimeProceduresPosted = " + POut.DateT(aPIBilling.DateTimeProceduresPosted) + "";
            }
            if (aPIBilling.DateOfBill.Date != oldAPIBilling.DateOfBill.Date)
            {
                if (command != "") { command += ","; }
                command += "DateOfBill = " + POut.Date(aPIBilling.DateOfBill) + "";
            }
            if (aPIBilling.MonthOfBill.Date != oldAPIBilling.MonthOfBill.Date)
            {
                if (command != "") { command += ","; }
                command += "MonthOfBill = " + POut.Date(aPIBilling.MonthOfBill) + "";
            }
            if (aPIBilling.ProceduresJson != oldAPIBilling.ProceduresJson)
            {
                if (command != "") { command += ","; }
                command += "ProceduresJson = " + DbHelper.ParamChar + "paramProceduresJson";
            }
            if (command == "")
            {
                return false;
            }
            if (aPIBilling.ProceduresJson == null)
            {
                aPIBilling.ProceduresJson = "";
            }
            OdSqlParameter paramProceduresJson = new OdSqlParameter("paramProceduresJson", OdDbType.Text, POut.StringParam(aPIBilling.ProceduresJson));
            command = "UPDATE apibilling SET " + command
                + " WHERE APIBillingNum = " + POut.Long(aPIBilling.APIBillingNum);
            Db.NonQ(command, paramProceduresJson);
            return true;
        }

        ///<summary>Returns true if Update(APIBilling,APIBilling) would make changes to the database.
        ///Does not make any changes to the database and can be called before remoting role is checked.</summary>
        public static bool UpdateComparison(APIBilling aPIBilling, APIBilling oldAPIBilling)
        {
            if (aPIBilling.CustPatNum != oldAPIBilling.CustPatNum)
            {
                return true;
            }
            if (aPIBilling.BillingCycleDay != oldAPIBilling.BillingCycleDay)
            {
                return true;
            }
            //DateTimeEntry not allowed to change
            if (aPIBilling.DateTimeProceduresPosted != oldAPIBilling.DateTimeProceduresPosted)
            {
                return true;
            }
            if (aPIBilling.DateOfBill.Date != oldAPIBilling.DateOfBill.Date)
            {
                return true;
            }
            if (aPIBilling.MonthOfBill.Date != oldAPIBilling.MonthOfBill.Date)
            {
                return true;
            }
            if (aPIBilling.ProceduresJson != oldAPIBilling.ProceduresJson)
            {
                return true;
            }
            return false;
        }

        ///<summary>Deletes one APIBilling from the database.</summary>
        public static void Delete(long aPIBillingNum)
        {
            string command = "DELETE FROM apibilling "
                + "WHERE APIBillingNum = " + POut.Long(aPIBillingNum);
            Db.NonQ(command);
        }

        ///<summary>Deletes many APIBillings from the database.</summary>
        public static void DeleteMany(List<long> listAPIBillingNums)
        {
            if (listAPIBillingNums == null || listAPIBillingNums.Count == 0)
            {
                return;
            }
            string command = "DELETE FROM apibilling "
                + "WHERE APIBillingNum IN(" + string.Join(",", listAPIBillingNums.Select(x => POut.Long(x))) + ")";
            Db.NonQ(command);
        }

    }
}