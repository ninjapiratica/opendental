//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace OpenDentBusiness.Crud
{
    public class MobileReleaseCrud
    {
        ///<summary>Gets one MobileRelease object from the database using the primary key.  Returns null if not found.</summary>
        public static MobileRelease SelectOne(long mobileReleaseNum)
        {
            string command = "SELECT * FROM mobilerelease "
                + "WHERE MobileReleaseNum = " + POut.Long(mobileReleaseNum);
            List<MobileRelease> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets one MobileRelease object from the database using a query.</summary>
        public static MobileRelease SelectOne(string command)
        {
            if (RemotingClient.MiddleTierRole == MiddleTierRole.ClientMT)
            {
                throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
            }
            List<MobileRelease> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets a list of MobileRelease objects from the database using a query.</summary>
        public static List<MobileRelease> SelectMany(string command)
        {
            if (RemotingClient.MiddleTierRole == MiddleTierRole.ClientMT)
            {
                throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
            }
            List<MobileRelease> list = TableToList(Db.GetTable(command));
            return list;
        }

        ///<summary>Converts a DataTable to a list of objects.</summary>
        public static List<MobileRelease> TableToList(DataTable table)
        {
            List<MobileRelease> retVal = new List<MobileRelease>();
            MobileRelease mobileRelease;
            foreach (DataRow row in table.Rows)
            {
                mobileRelease = new MobileRelease();
                mobileRelease.MobileReleaseNum = PIn.Long(row["MobileReleaseNum"].ToString());
                mobileRelease.MajorNum = PIn.Int(row["MajorNum"].ToString());
                mobileRelease.MinorNum = PIn.Int(row["MinorNum"].ToString());
                mobileRelease.BuildNum = PIn.Int(row["BuildNum"].ToString());
                string appType = row["AppType"].ToString();
                if (appType == "")
                {
                    mobileRelease.AppType = (OpenDentBusiness.AppType)0;
                }
                else try
                    {
                        mobileRelease.AppType = (OpenDentBusiness.AppType)Enum.Parse(typeof(OpenDentBusiness.AppType), appType);
                    }
                    catch
                    {
                        mobileRelease.AppType = (OpenDentBusiness.AppType)0;
                    }
                mobileRelease.ReleaseNote = PIn.String(row["ReleaseNote"].ToString());
                mobileRelease.DateTimeCreated = PIn.DateT(row["DateTimeCreated"].ToString());
                retVal.Add(mobileRelease);
            }
            return retVal;
        }

        ///<summary>Converts a list of MobileRelease into a DataTable.</summary>
        public static DataTable ListToTable(List<MobileRelease> listMobileReleases, string tableName = "")
        {
            if (string.IsNullOrEmpty(tableName))
            {
                tableName = "MobileRelease";
            }
            DataTable table = new DataTable(tableName);
            table.Columns.Add("MobileReleaseNum");
            table.Columns.Add("MajorNum");
            table.Columns.Add("MinorNum");
            table.Columns.Add("BuildNum");
            table.Columns.Add("AppType");
            table.Columns.Add("ReleaseNote");
            table.Columns.Add("DateTimeCreated");
            foreach (MobileRelease mobileRelease in listMobileReleases)
            {
                table.Rows.Add(new object[] {
                    POut.Long  (mobileRelease.MobileReleaseNum),
                    POut.Int   (mobileRelease.MajorNum),
                    POut.Int   (mobileRelease.MinorNum),
                    POut.Int   (mobileRelease.BuildNum),
                    POut.Int   ((int)mobileRelease.AppType),
                                mobileRelease.ReleaseNote,
                    POut.DateT (mobileRelease.DateTimeCreated,false),
                });
            }
            return table;
        }

        ///<summary>Inserts one MobileRelease into the database.  Returns the new priKey.</summary>
        public static long Insert(MobileRelease mobileRelease)
        {
            return Insert(mobileRelease, false);
        }

        ///<summary>Inserts one MobileRelease into the database.  Provides option to use the existing priKey.</summary>
        public static long Insert(MobileRelease mobileRelease, bool useExistingPK)
        {
            string command = "INSERT INTO mobilerelease (";
            if (useExistingPK)
            {
                command += "MobileReleaseNum,";
            }
            command += "MajorNum,MinorNum,BuildNum,AppType,ReleaseNote,DateTimeCreated) VALUES(";
            if (useExistingPK)
            {
                command += POut.Long(mobileRelease.MobileReleaseNum) + ",";
            }
            command +=
                     POut.Int(mobileRelease.MajorNum) + ","
                + POut.Int(mobileRelease.MinorNum) + ","
                + POut.Int(mobileRelease.BuildNum) + ","
                + "'" + POut.String(mobileRelease.AppType.ToString()) + "',"
                + "'" + POut.String(mobileRelease.ReleaseNote) + "',"
                + DbHelper.Now() + ")";
            if (useExistingPK)
            {
                Db.NonQ(command);
            }
            else
            {
                mobileRelease.MobileReleaseNum = Db.NonQ(command, true, "MobileReleaseNum", "mobileRelease");
            }
            return mobileRelease.MobileReleaseNum;
        }

        ///<summary>Inserts one MobileRelease into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        public static long InsertNoCache(MobileRelease mobileRelease)
        {
            return InsertNoCache(mobileRelease, false);
        }

        ///<summary>Inserts one MobileRelease into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        public static long InsertNoCache(MobileRelease mobileRelease, bool useExistingPK)
        {
            string command = "INSERT INTO mobilerelease (";
            if (useExistingPK)
            {
                command += "MobileReleaseNum,";
            }
            command += "MajorNum,MinorNum,BuildNum,AppType,ReleaseNote,DateTimeCreated) VALUES(";
            if (useExistingPK)
            {
                command += POut.Long(mobileRelease.MobileReleaseNum) + ",";
            }
            command +=
                     POut.Int(mobileRelease.MajorNum) + ","
                + POut.Int(mobileRelease.MinorNum) + ","
                + POut.Int(mobileRelease.BuildNum) + ","
                + "'" + POut.String(mobileRelease.AppType.ToString()) + "',"
                + "'" + POut.String(mobileRelease.ReleaseNote) + "',"
                + DbHelper.Now() + ")";
            if (useExistingPK)
            {
                Db.NonQ(command);
            }
            else
            {
                mobileRelease.MobileReleaseNum = Db.NonQ(command, true, "MobileReleaseNum", "mobileRelease");
            }
            return mobileRelease.MobileReleaseNum;
        }

        ///<summary>Updates one MobileRelease in the database.</summary>
        public static void Update(MobileRelease mobileRelease)
        {
            string command = "UPDATE mobilerelease SET "
                + "MajorNum        =  " + POut.Int(mobileRelease.MajorNum) + ", "
                + "MinorNum        =  " + POut.Int(mobileRelease.MinorNum) + ", "
                + "BuildNum        =  " + POut.Int(mobileRelease.BuildNum) + ", "
                + "AppType         = '" + POut.String(mobileRelease.AppType.ToString()) + "', "
                + "ReleaseNote     = '" + POut.String(mobileRelease.ReleaseNote) + "' "
                //DateTimeCreated not allowed to change
                + "WHERE MobileReleaseNum = " + POut.Long(mobileRelease.MobileReleaseNum);
            Db.NonQ(command);
        }

        ///<summary>Updates one MobileRelease in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        public static bool Update(MobileRelease mobileRelease, MobileRelease oldMobileRelease)
        {
            string command = "";
            if (mobileRelease.MajorNum != oldMobileRelease.MajorNum)
            {
                if (command != "") { command += ","; }
                command += "MajorNum = " + POut.Int(mobileRelease.MajorNum) + "";
            }
            if (mobileRelease.MinorNum != oldMobileRelease.MinorNum)
            {
                if (command != "") { command += ","; }
                command += "MinorNum = " + POut.Int(mobileRelease.MinorNum) + "";
            }
            if (mobileRelease.BuildNum != oldMobileRelease.BuildNum)
            {
                if (command != "") { command += ","; }
                command += "BuildNum = " + POut.Int(mobileRelease.BuildNum) + "";
            }
            if (mobileRelease.AppType != oldMobileRelease.AppType)
            {
                if (command != "") { command += ","; }
                command += "AppType = '" + POut.String(mobileRelease.AppType.ToString()) + "'";
            }
            if (mobileRelease.ReleaseNote != oldMobileRelease.ReleaseNote)
            {
                if (command != "") { command += ","; }
                command += "ReleaseNote = '" + POut.String(mobileRelease.ReleaseNote) + "'";
            }
            //DateTimeCreated not allowed to change
            if (command == "")
            {
                return false;
            }
            command = "UPDATE mobilerelease SET " + command
                + " WHERE MobileReleaseNum = " + POut.Long(mobileRelease.MobileReleaseNum);
            Db.NonQ(command);
            return true;
        }

        ///<summary>Returns true if Update(MobileRelease,MobileRelease) would make changes to the database.
        ///Does not make any changes to the database and can be called before remoting role is checked.</summary>
        public static bool UpdateComparison(MobileRelease mobileRelease, MobileRelease oldMobileRelease)
        {
            if (mobileRelease.MajorNum != oldMobileRelease.MajorNum)
            {
                return true;
            }
            if (mobileRelease.MinorNum != oldMobileRelease.MinorNum)
            {
                return true;
            }
            if (mobileRelease.BuildNum != oldMobileRelease.BuildNum)
            {
                return true;
            }
            if (mobileRelease.AppType != oldMobileRelease.AppType)
            {
                return true;
            }
            if (mobileRelease.ReleaseNote != oldMobileRelease.ReleaseNote)
            {
                return true;
            }
            //DateTimeCreated not allowed to change
            return false;
        }

        ///<summary>Deletes one MobileRelease from the database.</summary>
        public static void Delete(long mobileReleaseNum)
        {
            string command = "DELETE FROM mobilerelease "
                + "WHERE MobileReleaseNum = " + POut.Long(mobileReleaseNum);
            Db.NonQ(command);
        }

        ///<summary>Deletes many MobileReleases from the database.</summary>
        public static void DeleteMany(List<long> listMobileReleaseNums)
        {
            if (listMobileReleaseNums == null || listMobileReleaseNums.Count == 0)
            {
                return;
            }
            string command = "DELETE FROM mobilerelease "
                + "WHERE MobileReleaseNum IN(" + string.Join(",", listMobileReleaseNums.Select(x => POut.Long(x))) + ")";
            Db.NonQ(command);
        }

    }
}