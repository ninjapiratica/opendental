//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace OpenDentBusiness.Crud
{
    public class MobileBugCrud
    {
        ///<summary>Gets one MobileBug object from the database using the primary key.  Returns null if not found.</summary>
        public static MobileBug SelectOne(long mobileBugNum)
        {
            string command = "SELECT * FROM mobilebug "
                + "WHERE MobileBugNum = " + POut.Long(mobileBugNum);
            List<MobileBug> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets one MobileBug object from the database using a query.</summary>
        public static MobileBug SelectOne(string command)
        {
            if (RemotingClient.MiddleTierRole == MiddleTierRole.ClientMT)
            {
                throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
            }
            List<MobileBug> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets a list of MobileBug objects from the database using a query.</summary>
        public static List<MobileBug> SelectMany(string command)
        {
            if (RemotingClient.MiddleTierRole == MiddleTierRole.ClientMT)
            {
                throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
            }
            List<MobileBug> list = TableToList(Db.GetTable(command));
            return list;
        }

        ///<summary>Converts a DataTable to a list of objects.</summary>
        public static List<MobileBug> TableToList(DataTable table)
        {
            List<MobileBug> retVal = new List<MobileBug>();
            MobileBug mobileBug;
            foreach (DataRow row in table.Rows)
            {
                mobileBug = new MobileBug();
                mobileBug.MobileBugNum = PIn.Long(row["MobileBugNum"].ToString());
                mobileBug.DateTimeCreated = PIn.DateT(row["DateTimeCreated"].ToString());
                string bugStatus = row["BugStatus"].ToString();
                if (bugStatus == "")
                {
                    mobileBug.BugStatus = (OpenDentBusiness.MobileBugStatus)0;
                }
                else try
                    {
                        mobileBug.BugStatus = (OpenDentBusiness.MobileBugStatus)Enum.Parse(typeof(OpenDentBusiness.MobileBugStatus), bugStatus);
                    }
                    catch
                    {
                        mobileBug.BugStatus = (OpenDentBusiness.MobileBugStatus)0;
                    }
                mobileBug.Description = PIn.String(row["Description"].ToString());
                mobileBug.ODVersionsFound = PIn.String(row["ODVersionsFound"].ToString());
                mobileBug.ODVersionsFixed = PIn.String(row["ODVersionsFixed"].ToString());
                mobileBug.Platforms = (OpenDentBusiness.Platforms)PIn.Int(row["Platforms"].ToString());
                mobileBug.Submitter = PIn.Int(row["Submitter"].ToString());
                retVal.Add(mobileBug);
            }
            return retVal;
        }

        ///<summary>Converts a list of MobileBug into a DataTable.</summary>
        public static DataTable ListToTable(List<MobileBug> listMobileBugs, string tableName = "")
        {
            if (string.IsNullOrEmpty(tableName))
            {
                tableName = "MobileBug";
            }
            DataTable table = new DataTable(tableName);
            table.Columns.Add("MobileBugNum");
            table.Columns.Add("DateTimeCreated");
            table.Columns.Add("BugStatus");
            table.Columns.Add("Description");
            table.Columns.Add("ODVersionsFound");
            table.Columns.Add("ODVersionsFixed");
            table.Columns.Add("Platforms");
            table.Columns.Add("Submitter");
            foreach (MobileBug mobileBug in listMobileBugs)
            {
                table.Rows.Add(new object[] {
                    POut.Long  (mobileBug.MobileBugNum),
                    POut.DateT (mobileBug.DateTimeCreated,false),
                    POut.Int   ((int)mobileBug.BugStatus),
                                mobileBug.Description,
                                mobileBug.ODVersionsFound,
                                mobileBug.ODVersionsFixed,
                    POut.Int   ((int)mobileBug.Platforms),
                    POut.Int   (mobileBug.Submitter),
                });
            }
            return table;
        }

        ///<summary>Inserts one MobileBug into the database.  Returns the new priKey.</summary>
        public static long Insert(MobileBug mobileBug)
        {
            return Insert(mobileBug, false);
        }

        ///<summary>Inserts one MobileBug into the database.  Provides option to use the existing priKey.</summary>
        public static long Insert(MobileBug mobileBug, bool useExistingPK)
        {
            string command = "INSERT INTO mobilebug (";
            if (useExistingPK)
            {
                command += "MobileBugNum,";
            }
            command += "DateTimeCreated,BugStatus,Description,ODVersionsFound,ODVersionsFixed,Platforms,Submitter) VALUES(";
            if (useExistingPK)
            {
                command += POut.Long(mobileBug.MobileBugNum) + ",";
            }
            command +=
                     DbHelper.Now() + ","
                + "'" + POut.String(mobileBug.BugStatus.ToString()) + "',"
                + "'" + POut.String(mobileBug.Description) + "',"
                + "'" + POut.String(mobileBug.ODVersionsFound) + "',"
                + "'" + POut.String(mobileBug.ODVersionsFixed) + "',"
                + POut.Int((int)mobileBug.Platforms) + ","
                + POut.Int(mobileBug.Submitter) + ")";
            if (useExistingPK)
            {
                Db.NonQ(command);
            }
            else
            {
                mobileBug.MobileBugNum = Db.NonQ(command, true, "MobileBugNum", "mobileBug");
            }
            return mobileBug.MobileBugNum;
        }

        ///<summary>Inserts one MobileBug into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        public static long InsertNoCache(MobileBug mobileBug)
        {
            return InsertNoCache(mobileBug, false);
        }

        ///<summary>Inserts one MobileBug into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        public static long InsertNoCache(MobileBug mobileBug, bool useExistingPK)
        {
            string command = "INSERT INTO mobilebug (";
            if (useExistingPK)
            {
                command += "MobileBugNum,";
            }
            command += "DateTimeCreated,BugStatus,Description,ODVersionsFound,ODVersionsFixed,Platforms,Submitter) VALUES(";
            if (useExistingPK)
            {
                command += POut.Long(mobileBug.MobileBugNum) + ",";
            }
            command +=
                     DbHelper.Now() + ","
                + "'" + POut.String(mobileBug.BugStatus.ToString()) + "',"
                + "'" + POut.String(mobileBug.Description) + "',"
                + "'" + POut.String(mobileBug.ODVersionsFound) + "',"
                + "'" + POut.String(mobileBug.ODVersionsFixed) + "',"
                + POut.Int((int)mobileBug.Platforms) + ","
                + POut.Int(mobileBug.Submitter) + ")";
            if (useExistingPK)
            {
                Db.NonQ(command);
            }
            else
            {
                mobileBug.MobileBugNum = Db.NonQ(command, true, "MobileBugNum", "mobileBug");
            }
            return mobileBug.MobileBugNum;
        }

        ///<summary>Updates one MobileBug in the database.</summary>
        public static void Update(MobileBug mobileBug)
        {
            string command = "UPDATE mobilebug SET "
                //DateTimeCreated not allowed to change
                + "BugStatus      = '" + POut.String(mobileBug.BugStatus.ToString()) + "', "
                + "Description    = '" + POut.String(mobileBug.Description) + "', "
                + "ODVersionsFound= '" + POut.String(mobileBug.ODVersionsFound) + "', "
                + "ODVersionsFixed= '" + POut.String(mobileBug.ODVersionsFixed) + "', "
                + "Platforms      =  " + POut.Int((int)mobileBug.Platforms) + ", "
                + "Submitter      =  " + POut.Int(mobileBug.Submitter) + " "
                + "WHERE MobileBugNum = " + POut.Long(mobileBug.MobileBugNum);
            Db.NonQ(command);
        }

        ///<summary>Updates one MobileBug in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        public static bool Update(MobileBug mobileBug, MobileBug oldMobileBug)
        {
            string command = "";
            //DateTimeCreated not allowed to change
            if (mobileBug.BugStatus != oldMobileBug.BugStatus)
            {
                if (command != "") { command += ","; }
                command += "BugStatus = '" + POut.String(mobileBug.BugStatus.ToString()) + "'";
            }
            if (mobileBug.Description != oldMobileBug.Description)
            {
                if (command != "") { command += ","; }
                command += "Description = '" + POut.String(mobileBug.Description) + "'";
            }
            if (mobileBug.ODVersionsFound != oldMobileBug.ODVersionsFound)
            {
                if (command != "") { command += ","; }
                command += "ODVersionsFound = '" + POut.String(mobileBug.ODVersionsFound) + "'";
            }
            if (mobileBug.ODVersionsFixed != oldMobileBug.ODVersionsFixed)
            {
                if (command != "") { command += ","; }
                command += "ODVersionsFixed = '" + POut.String(mobileBug.ODVersionsFixed) + "'";
            }
            if (mobileBug.Platforms != oldMobileBug.Platforms)
            {
                if (command != "") { command += ","; }
                command += "Platforms = " + POut.Int((int)mobileBug.Platforms) + "";
            }
            if (mobileBug.Submitter != oldMobileBug.Submitter)
            {
                if (command != "") { command += ","; }
                command += "Submitter = " + POut.Int(mobileBug.Submitter) + "";
            }
            if (command == "")
            {
                return false;
            }
            command = "UPDATE mobilebug SET " + command
                + " WHERE MobileBugNum = " + POut.Long(mobileBug.MobileBugNum);
            Db.NonQ(command);
            return true;
        }

        ///<summary>Returns true if Update(MobileBug,MobileBug) would make changes to the database.
        ///Does not make any changes to the database and can be called before remoting role is checked.</summary>
        public static bool UpdateComparison(MobileBug mobileBug, MobileBug oldMobileBug)
        {
            //DateTimeCreated not allowed to change
            if (mobileBug.BugStatus != oldMobileBug.BugStatus)
            {
                return true;
            }
            if (mobileBug.Description != oldMobileBug.Description)
            {
                return true;
            }
            if (mobileBug.ODVersionsFound != oldMobileBug.ODVersionsFound)
            {
                return true;
            }
            if (mobileBug.ODVersionsFixed != oldMobileBug.ODVersionsFixed)
            {
                return true;
            }
            if (mobileBug.Platforms != oldMobileBug.Platforms)
            {
                return true;
            }
            if (mobileBug.Submitter != oldMobileBug.Submitter)
            {
                return true;
            }
            return false;
        }

        ///<summary>Deletes one MobileBug from the database.</summary>
        public static void Delete(long mobileBugNum)
        {
            string command = "DELETE FROM mobilebug "
                + "WHERE MobileBugNum = " + POut.Long(mobileBugNum);
            Db.NonQ(command);
        }

        ///<summary>Deletes many MobileBugs from the database.</summary>
        public static void DeleteMany(List<long> listMobileBugNums)
        {
            if (listMobileBugNums == null || listMobileBugNums.Count == 0)
            {
                return;
            }
            string command = "DELETE FROM mobilebug "
                + "WHERE MobileBugNum IN(" + string.Join(",", listMobileBugNums.Select(x => POut.Long(x))) + ")";
            Db.NonQ(command);
        }

    }
}