//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace OpenDentBusiness.Crud
{
    public class CloudBillingCrud
    {
        ///<summary>Gets one CloudBilling object from the database using the primary key.  Returns null if not found.</summary>
        public static CloudBilling SelectOne(long cloudBillingNum)
        {
            string command = "SELECT * FROM cloudbilling "
                + "WHERE CloudBillingNum = " + POut.Long(cloudBillingNum);
            List<CloudBilling> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets one CloudBilling object from the database using a query.</summary>
        public static CloudBilling SelectOne(string command)
        {
            if (RemotingClient.MiddleTierRole == MiddleTierRole.ClientMT)
            {
                throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
            }
            List<CloudBilling> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets a list of CloudBilling objects from the database using a query.</summary>
        public static List<CloudBilling> SelectMany(string command)
        {
            if (RemotingClient.MiddleTierRole == MiddleTierRole.ClientMT)
            {
                throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
            }
            List<CloudBilling> list = TableToList(Db.GetTable(command));
            return list;
        }

        ///<summary>Converts a DataTable to a list of objects.</summary>
        public static List<CloudBilling> TableToList(DataTable table)
        {
            List<CloudBilling> retVal = new List<CloudBilling>();
            CloudBilling cloudBilling;
            foreach (DataRow row in table.Rows)
            {
                cloudBilling = new CloudBilling();
                cloudBilling.CloudBillingNum = PIn.Long(row["CloudBillingNum"].ToString());
                cloudBilling.PatNum = PIn.Long(row["PatNum"].ToString());
                cloudBilling.BillingCycleDay = PIn.Int(row["BillingCycleDay"].ToString());
                cloudBilling.DateTimeEntry = PIn.DateT(row["DateTimeEntry"].ToString());
                cloudBilling.DateTimeProceduresPosted = PIn.DateT(row["DateTimeProceduresPosted"].ToString());
                cloudBilling.DateOfBill = PIn.Date(row["DateOfBill"].ToString());
                cloudBilling.MonthOfBill = PIn.Date(row["MonthOfBill"].ToString());
                cloudBilling.ProceduresJson = PIn.String(row["ProceduresJson"].ToString());
                retVal.Add(cloudBilling);
            }
            return retVal;
        }

        ///<summary>Converts a list of CloudBilling into a DataTable.</summary>
        public static DataTable ListToTable(List<CloudBilling> listCloudBillings, string tableName = "")
        {
            if (string.IsNullOrEmpty(tableName))
            {
                tableName = "CloudBilling";
            }
            DataTable table = new DataTable(tableName);
            table.Columns.Add("CloudBillingNum");
            table.Columns.Add("PatNum");
            table.Columns.Add("BillingCycleDay");
            table.Columns.Add("DateTimeEntry");
            table.Columns.Add("DateTimeProceduresPosted");
            table.Columns.Add("DateOfBill");
            table.Columns.Add("MonthOfBill");
            table.Columns.Add("ProceduresJson");
            foreach (CloudBilling cloudBilling in listCloudBillings)
            {
                table.Rows.Add(new object[] {
                    POut.Long  (cloudBilling.CloudBillingNum),
                    POut.Long  (cloudBilling.PatNum),
                    POut.Int   (cloudBilling.BillingCycleDay),
                    POut.DateT (cloudBilling.DateTimeEntry,false),
                    POut.DateT (cloudBilling.DateTimeProceduresPosted,false),
                    POut.DateT (cloudBilling.DateOfBill,false),
                    POut.DateT (cloudBilling.MonthOfBill,false),
                                cloudBilling.ProceduresJson,
                });
            }
            return table;
        }

        ///<summary>Inserts one CloudBilling into the database.  Returns the new priKey.</summary>
        public static long Insert(CloudBilling cloudBilling)
        {
            return Insert(cloudBilling, false);
        }

        ///<summary>Inserts one CloudBilling into the database.  Provides option to use the existing priKey.</summary>
        public static long Insert(CloudBilling cloudBilling, bool useExistingPK)
        {
            if (!useExistingPK && PrefC.RandomKeys)
            {
                cloudBilling.CloudBillingNum = ReplicationServers.GetKey("cloudbilling", "CloudBillingNum");
            }
            string command = "INSERT INTO cloudbilling (";
            if (useExistingPK || PrefC.RandomKeys)
            {
                command += "CloudBillingNum,";
            }
            command += "PatNum,BillingCycleDay,DateTimeEntry,DateTimeProceduresPosted,DateOfBill,MonthOfBill,ProceduresJson) VALUES(";
            if (useExistingPK || PrefC.RandomKeys)
            {
                command += POut.Long(cloudBilling.CloudBillingNum) + ",";
            }
            command +=
                     POut.Long(cloudBilling.PatNum) + ","
                + POut.Int(cloudBilling.BillingCycleDay) + ","
                + DbHelper.Now() + ","
                + POut.DateT(cloudBilling.DateTimeProceduresPosted) + ","
                + POut.Date(cloudBilling.DateOfBill) + ","
                + POut.Date(cloudBilling.MonthOfBill) + ","
                + DbHelper.ParamChar + "paramProceduresJson)";
            if (cloudBilling.ProceduresJson == null)
            {
                cloudBilling.ProceduresJson = "";
            }
            OdSqlParameter paramProceduresJson = new OdSqlParameter("paramProceduresJson", OdDbType.Text, POut.StringParam(cloudBilling.ProceduresJson));
            if (useExistingPK || PrefC.RandomKeys)
            {
                Db.NonQ(command, paramProceduresJson);
            }
            else
            {
                cloudBilling.CloudBillingNum = Db.NonQ(command, true, "CloudBillingNum", "cloudBilling", paramProceduresJson);
            }
            return cloudBilling.CloudBillingNum;
        }

        ///<summary>Inserts one CloudBilling into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        public static long InsertNoCache(CloudBilling cloudBilling)
        {
            return InsertNoCache(cloudBilling, false);
        }

        ///<summary>Inserts one CloudBilling into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        public static long InsertNoCache(CloudBilling cloudBilling, bool useExistingPK)
        {
            bool isRandomKeys = Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
            string command = "INSERT INTO cloudbilling (";
            if (!useExistingPK && isRandomKeys)
            {
                cloudBilling.CloudBillingNum = ReplicationServers.GetKeyNoCache("cloudbilling", "CloudBillingNum");
            }
            if (isRandomKeys || useExistingPK)
            {
                command += "CloudBillingNum,";
            }
            command += "PatNum,BillingCycleDay,DateTimeEntry,DateTimeProceduresPosted,DateOfBill,MonthOfBill,ProceduresJson) VALUES(";
            if (isRandomKeys || useExistingPK)
            {
                command += POut.Long(cloudBilling.CloudBillingNum) + ",";
            }
            command +=
                     POut.Long(cloudBilling.PatNum) + ","
                + POut.Int(cloudBilling.BillingCycleDay) + ","
                + DbHelper.Now() + ","
                + POut.DateT(cloudBilling.DateTimeProceduresPosted) + ","
                + POut.Date(cloudBilling.DateOfBill) + ","
                + POut.Date(cloudBilling.MonthOfBill) + ","
                + DbHelper.ParamChar + "paramProceduresJson)";
            if (cloudBilling.ProceduresJson == null)
            {
                cloudBilling.ProceduresJson = "";
            }
            OdSqlParameter paramProceduresJson = new OdSqlParameter("paramProceduresJson", OdDbType.Text, POut.StringParam(cloudBilling.ProceduresJson));
            if (useExistingPK || isRandomKeys)
            {
                Db.NonQ(command, paramProceduresJson);
            }
            else
            {
                cloudBilling.CloudBillingNum = Db.NonQ(command, true, "CloudBillingNum", "cloudBilling", paramProceduresJson);
            }
            return cloudBilling.CloudBillingNum;
        }

        ///<summary>Updates one CloudBilling in the database.</summary>
        public static void Update(CloudBilling cloudBilling)
        {
            string command = "UPDATE cloudbilling SET "
                + "PatNum                  =  " + POut.Long(cloudBilling.PatNum) + ", "
                + "BillingCycleDay         =  " + POut.Int(cloudBilling.BillingCycleDay) + ", "
                //DateTimeEntry not allowed to change
                + "DateTimeProceduresPosted=  " + POut.DateT(cloudBilling.DateTimeProceduresPosted) + ", "
                + "DateOfBill              =  " + POut.Date(cloudBilling.DateOfBill) + ", "
                + "MonthOfBill             =  " + POut.Date(cloudBilling.MonthOfBill) + ", "
                + "ProceduresJson          =  " + DbHelper.ParamChar + "paramProceduresJson "
                + "WHERE CloudBillingNum = " + POut.Long(cloudBilling.CloudBillingNum);
            if (cloudBilling.ProceduresJson == null)
            {
                cloudBilling.ProceduresJson = "";
            }
            OdSqlParameter paramProceduresJson = new OdSqlParameter("paramProceduresJson", OdDbType.Text, POut.StringParam(cloudBilling.ProceduresJson));
            Db.NonQ(command, paramProceduresJson);
        }

        ///<summary>Updates one CloudBilling in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        public static bool Update(CloudBilling cloudBilling, CloudBilling oldCloudBilling)
        {
            string command = "";
            if (cloudBilling.PatNum != oldCloudBilling.PatNum)
            {
                if (command != "") { command += ","; }
                command += "PatNum = " + POut.Long(cloudBilling.PatNum) + "";
            }
            if (cloudBilling.BillingCycleDay != oldCloudBilling.BillingCycleDay)
            {
                if (command != "") { command += ","; }
                command += "BillingCycleDay = " + POut.Int(cloudBilling.BillingCycleDay) + "";
            }
            //DateTimeEntry not allowed to change
            if (cloudBilling.DateTimeProceduresPosted != oldCloudBilling.DateTimeProceduresPosted)
            {
                if (command != "") { command += ","; }
                command += "DateTimeProceduresPosted = " + POut.DateT(cloudBilling.DateTimeProceduresPosted) + "";
            }
            if (cloudBilling.DateOfBill.Date != oldCloudBilling.DateOfBill.Date)
            {
                if (command != "") { command += ","; }
                command += "DateOfBill = " + POut.Date(cloudBilling.DateOfBill) + "";
            }
            if (cloudBilling.MonthOfBill.Date != oldCloudBilling.MonthOfBill.Date)
            {
                if (command != "") { command += ","; }
                command += "MonthOfBill = " + POut.Date(cloudBilling.MonthOfBill) + "";
            }
            if (cloudBilling.ProceduresJson != oldCloudBilling.ProceduresJson)
            {
                if (command != "") { command += ","; }
                command += "ProceduresJson = " + DbHelper.ParamChar + "paramProceduresJson";
            }
            if (command == "")
            {
                return false;
            }
            if (cloudBilling.ProceduresJson == null)
            {
                cloudBilling.ProceduresJson = "";
            }
            OdSqlParameter paramProceduresJson = new OdSqlParameter("paramProceduresJson", OdDbType.Text, POut.StringParam(cloudBilling.ProceduresJson));
            command = "UPDATE cloudbilling SET " + command
                + " WHERE CloudBillingNum = " + POut.Long(cloudBilling.CloudBillingNum);
            Db.NonQ(command, paramProceduresJson);
            return true;
        }

        ///<summary>Returns true if Update(CloudBilling,CloudBilling) would make changes to the database.
        ///Does not make any changes to the database and can be called before remoting role is checked.</summary>
        public static bool UpdateComparison(CloudBilling cloudBilling, CloudBilling oldCloudBilling)
        {
            if (cloudBilling.PatNum != oldCloudBilling.PatNum)
            {
                return true;
            }
            if (cloudBilling.BillingCycleDay != oldCloudBilling.BillingCycleDay)
            {
                return true;
            }
            //DateTimeEntry not allowed to change
            if (cloudBilling.DateTimeProceduresPosted != oldCloudBilling.DateTimeProceduresPosted)
            {
                return true;
            }
            if (cloudBilling.DateOfBill.Date != oldCloudBilling.DateOfBill.Date)
            {
                return true;
            }
            if (cloudBilling.MonthOfBill.Date != oldCloudBilling.MonthOfBill.Date)
            {
                return true;
            }
            if (cloudBilling.ProceduresJson != oldCloudBilling.ProceduresJson)
            {
                return true;
            }
            return false;
        }

        ///<summary>Deletes one CloudBilling from the database.</summary>
        public static void Delete(long cloudBillingNum)
        {
            string command = "DELETE FROM cloudbilling "
                + "WHERE CloudBillingNum = " + POut.Long(cloudBillingNum);
            Db.NonQ(command);
        }

        ///<summary>Deletes many CloudBillings from the database.</summary>
        public static void DeleteMany(List<long> listCloudBillingNums)
        {
            if (listCloudBillingNums == null || listCloudBillingNums.Count == 0)
            {
                return;
            }
            string command = "DELETE FROM cloudbilling "
                + "WHERE CloudBillingNum IN(" + string.Join(",", listCloudBillingNums.Select(x => POut.Long(x))) + ")";
            Db.NonQ(command);
        }

    }
}